<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vyorkin.org</title>
    <link>https://vyorkin.org/posts/</link>
    <description>Recent content in Posts on vyorkin.org</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 15 Nov 2022 12:30:00 +0300</lastBuildDate>
    <atom:link href="https://vyorkin.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Damn Vulnerable DeFi, #8 Puppet</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-8-puppet/</link>
      <pubDate>Tue, 15 Nov 2022 12:30:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-8-puppet/</guid>
      <description>Challenge Link to heading There&amp;rsquo;s a huge lending pool borrowing Damn Valuable Tokens (DVTs), where you first need to deposit twice the borrow amount in ETH as collateral. The pool currently has 100000 DVTs in liquidity.&#xA;There&amp;rsquo;s a DVT market opened in an description Uniswap v1 exchange, currently with 10 ETH and 10 DVT in liquidity.&#xA;Starting with 25 ETH and 1000 DVTs in balance, you must steal all tokens from the lending pool.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #11 Backdoor</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-11-backdoor/</link>
      <pubDate>Thu, 03 Nov 2022 22:27:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-11-backdoor/</guid>
      <description>Challenge Link to heading To incentivize the creation of more secure wallets in their team, someone has deployed a registry of Gnosis Safe wallets. When someone in the team deploys and registers a wallet, they will earn 10 DVT tokens.&#xA;To make sure everything is safe and sound, the registry tightly integrates with the legitimate Gnosis Safe Proxy Factory, and has some additional safety checks.&#xA;Currently there are four people registered as beneficiaries: Alice, Bob, Charlie and David.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #7 Compromised</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-7-compromised/</link>
      <pubDate>Wed, 02 Nov 2022 11:09:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-7-compromised/</guid>
      <description>Challenge Link to heading While poking around a web service of one of the most popular DeFi projects in the space, you get a somewhat strange response from their server. This is a snippet:&#xA;HTTP/2 200 OK content-type: text/html content-language: en vary: Accept-Encoding server: cloudflare 4d 48 68 6a 4e 6a 63 34 5a 57 59 78 59 57 45 30 4e 54 5a 6b 59 54 59 31 59 7a 5a 6d 59 7a 55 34 4e 6a 46 6b 4e 44 51 34 4f 54 4a 6a 5a 47 5a 68 59 7a 42 6a 4e 6d 4d 34 59 7a 49 31 4e 6a 42 69 5a 6a 42 6a 4f 57 5a 69 59 32 52 68 5a 54 4a 6d 4e 44 63 7a 4e 57 45 35 4d 48 67 79 4d 44 67 79 4e 44 4a 6a 4e 44 42 68 59 32 52 6d 59 54 6c 6c 5a 44 67 34 4f 57 55 32 4f 44 56 6a 4d 6a 4d 31 4e 44 64 68 59 32 4a 6c 5a 44 6c 69 5a 57 5a 6a 4e 6a 41 7a 4e 7a 46 6c 4f 54 67 33 4e 57 5a 69 59 32 51 33 4d 7a 59 7a 4e 44 42 69 59 6a 51 34 Analysis Link to heading Solution Link to heading Remediation Link to heading Conclusion Link to heading References Link to heading I hope you enjoyed reading this post.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #6 Selfie</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-6-selfie/</link>
      <pubDate>Wed, 02 Nov 2022 08:12:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-6-selfie/</guid>
      <description>After a short break, I&amp;rsquo;m back and excited to keep going with these CTF walkthrough series.&#xA;The current challenge is Selfie:&#xA;Challenge Link to heading A new cool lending pool has launched! It&amp;rsquo;s now offering flash loans of DVT tokens. Wow, and it even includes a really fancy governance mechanism to control it. What could go wrong, right? You start with no DVT tokens in balance, and the pool has 1.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #5 The rewarder</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-5-the-rewarder/</link>
      <pubDate>Wed, 17 Aug 2022 00:33:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-5-the-rewarder/</guid>
      <description>Challenge Link to heading Today we&amp;rsquo;re going to take a look at The Rewarder challenge:&#xA;There&amp;rsquo;s a pool offering rewards in tokens every 5 days for those who deposit their DVT tokens into it. Alice, Bob, Charlie and David have already deposited some DVT tokens, and have won their rewards! You don&amp;rsquo;t have any DVT tokens. But in the upcoming round, you must claim most rewards for yourself. Oh, by the way, rumours say a new pool has just landed on mainnet.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #4 Side entrance</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-4-side-entrance/</link>
      <pubDate>Thu, 11 Aug 2022 16:56:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-4-side-entrance/</guid>
      <description>Challenge Link to heading A surprisingly simple lending pool allows anyone to deposit ETH, and withdraw it at any point in time. This very simple lending pool has 1000 ETH in balance already, and is offering free flash loans using the deposited ETH to promote their system. You must take all ETH from the lending pool. Here is the lending pool contract:&#xA;// SPDX-License-Identifier: MIT pragma solidity 0.8.12; import {Address} from &amp;#34;openzeppelin-contracts/utils/Address.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #3 Truster</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-3-truster/</link>
      <pubDate>Wed, 10 Aug 2022 11:37:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-3-truster/</guid>
      <description>Challenge Link to heading More and more lending pools are offering flash loans. In this case, a new pool has launched that is offering flash loans of DVT tokens for free.&#xA;Currently the pool has 1 million DVT tokens in balance. And you have nothing.&#xA;But don&amp;rsquo;t worry, you might be able to take them all from the pool. In a single transaction.&#xA;// SPDX-License-Identifier: MIT pragma solidity 0.8.12; import {IERC20} from &amp;#34;openzeppelin-contracts/token/ERC20/IERC20.</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #2 Naive Receiver</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-2-naive-receiver/</link>
      <pubDate>Tue, 09 Aug 2022 20:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-2-naive-receiver/</guid>
      <description>Challenge Link to heading There&amp;rsquo;s a lending pool offering quite expensive flash loans of Ether, which has 1000 ETH in balance.&#xA;You also see that a user has deployed a contract with 10 ETH in balance, capable of interacting with the lending pool and receiving flash loans of ETH.&#xA;Drain all ETH funds from the user&amp;rsquo;s contract. Doing it in a single transaction is a big plus ;)&#xA;Analysis Link to heading The challenge contains two contracts:</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #1 Unstoppable</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-1-unstoppable/</link>
      <pubDate>Tue, 09 Aug 2022 20:03:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-1-unstoppable/</guid>
      <description>There are only a few days left to prepare for the Paradigm CTF 2022. Hence I&amp;rsquo;m going to spend this time solving the Damn Vulnerable DeFi challenges and then concentrate on playing the Paradigm CTF 2021. Intro Link to heading Damn Vulnerable DeFi is a CTF that simulates DeFi vulnerabilities created by @tinchoabbate. This game has 13 different levels featuring popular DeFi primitives such as lash loans, price oracles, governance, lending pools, integrations with Uniswap v2, Gnosis Safe wallets, timelocks, NFTs, upgradeability patterns and more.</description>
    </item>
    <item>
      <title>Ethernaut, #14 Gatekeeper One</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-14-gatekeeper-one/</link>
      <pubDate>Thu, 04 Aug 2022 12:24:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-14-gatekeeper-one/</guid>
      <description>To solve this challenge we must register as an entrant.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; import &amp;#34;forge-std/console2.sol&amp;#34;; contract GatekeeperOne { address public entrant; modifier gateOne() { require(msg.sender != tx.origin); _; } modifier gateTwo() { require(gasleft() % 8191 == 0); _; } modifier gateThree(bytes8 _gateKey) { require( uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), &amp;#34;GatekeeperOne: invalid gateThree part one&amp;#34; ); require( uint32(uint64(_gateKey)) != uint64(_gateKey), &amp;#34;GatekeeperOne: invalid gateThree part two&amp;#34; ); require( uint32(uint64(_gateKey)) == uint16(uint160(tx.origin)), &amp;#34;GatekeeperOne: invalid gateThree part three&amp;#34; ); _; } function enter(bytes8 _gateKey) public gateOne gateTwo gateThree(_gateKey) returns (bool) { entrant = tx.</description>
    </item>
    <item>
      <title>Ethernaut, #13 Privacy</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-13-privacy/</link>
      <pubDate>Thu, 04 Aug 2022 11:27:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-13-privacy/</guid>
      <description>The creator of this contract was careful enough to protect the sensitive areas of its storage. Unlock this contract to beat the level.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Privacy { bool public locked = true; uint256 public ID = block.timestamp; uint8 private flattening = 10; uint8 private denomination = 255; uint16 private awkwardness = uint16(block.timestamp); bytes32[3] private data; constructor(bytes32[3] memory _data) { data = _data; } function unlock(bytes16 _key) public { require(_key == bytes16(data[2])); locked = false; } /* A bunch of super advanced solidity algorithms.</description>
    </item>
    <item>
      <title>Ethernaut, #12 Elevator</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-12-elevator/</link>
      <pubDate>Wed, 03 Aug 2022 19:58:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-12-elevator/</guid>
      <description>To solve this challenge we have to set the top state variable to true.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; interface Building { function isLastFloor(uint256) external returns (bool); } contract Elevator { bool public top; uint256 public floor; function goTo(uint256 _floor) public { Building building = Building(msg.sender); if (!building.isLastFloor(_floor)) { floor = _floor; top = building.isLastFloor(floor); } } } Analysis Link to heading Let&amp;rsquo;s go over the goTo function:&#xA;function goTo(uint256 _floor) public { Building building = Building(msg.</description>
    </item>
    <item>
      <title>Ethernaut, #11 Re-entrancy</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-11-re-entrancy/</link>
      <pubDate>Tue, 02 Aug 2022 11:57:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-11-re-entrancy/</guid>
      <description>The objective of this challenge is to steal all the funds from the contract.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Reentrance { mapping(address =&amp;gt; uint256) public balances; function donate(address _to) public payable { balances[_to] += msg.value; } function balanceOf(address _who) public view returns (uint256 balance) { return balances[_who]; } function withdraw(uint256 _amount) public { if (balances[msg.sender] &amp;gt;= _amount) { (bool result, ) = msg.sender.call{value: _amount}(&amp;#34;&amp;#34;); if (result) { _amount; } unchecked { balances[msg.</description>
    </item>
    <item>
      <title>Ethernaut, #10 King</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-10-king/</link>
      <pubDate>Mon, 01 Aug 2022 15:56:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-10-king/</guid>
      <description>The goal of this level is to break the game defined by the King contract.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract King { address payable king; address payable public owner; uint256 public prize; constructor() payable { owner = payable(msg.sender); king = payable(msg.sender); prize = msg.value; } receive() external payable { require(msg.value &amp;gt;= prize || msg.sender == owner); king.transfer(msg.value); king = payable(msg.sender); prize = msg.value; } function _king() public view returns (address payable) { return king; } } Here is how the game checks if we passed:</description>
    </item>
    <item>
      <title>Ethernaut, #9 Vault</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-9-vault/</link>
      <pubDate>Sat, 30 Jul 2022 19:01:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-9-vault/</guid>
      <description>We need to unlock the Vault smart contract to pass the level.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Vault { bool public locked; bytes32 private password; constructor(bytes32 _password) public { locked = true; password = _password; } function unlock(bytes32 _password) public { if (password == _password) { locked = false; } } } Analysis Link to heading Let&amp;rsquo;s look at the state variables:&#xA;bool public locked; bytes32 private password; In EVM storage is a key-value store that maps 256-bit words to 256-bit words and is accessed with EVM’s SSTORE~/~SLOAD instructions.</description>
    </item>
    <item>
      <title>Ethernaut, #8 Force</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-8-force/</link>
      <pubDate>Fri, 29 Jul 2022 16:29:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-8-force/</guid>
      <description>To complete this challenge we need to make the balance of the Force contract greater than zero.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Force {/* MEOW ? /\_/\ / ____/ o o \ /~____ =ø= / (______)__m_m) */} Thoughts Link to heading The contract has nothing in it, except the ASCII-art of a cat. It doesn&amp;rsquo;t have a receive, fallback function, or any other payable function:&#xA;If neither a receive Ether nor a payable fallback function is present, the contract cannot receive Ether through regular transactions and throws an exception.</description>
    </item>
    <item>
      <title>Ethernaut, #7 Delegation</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-7-delegation/</link>
      <pubDate>Fri, 29 Jul 2022 13:18:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-7-delegation/</guid>
      <description>The goals is to claim the ownership of the Delegate contract.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Delegate { address public owner; constructor(address _owner) { owner = _owner; } function pwn() public { owner = msg.sender; } } contract Delegation { address public owner; Delegate delegate; constructor(address _delegateAddress) { delegate = Delegate(_delegateAddress); owner = msg.sender; } fallback() external { (bool result, ) = address(delegate).delegatecall(msg.data); if (result) { this; } } } Analysis Link to heading We have two contracts: the Delegate and the Delegation.</description>
    </item>
    <item>
      <title>Ethernaut, #6 Token</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-6-token/</link>
      <pubDate>Thu, 28 Jul 2022 11:10:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-6-token/</guid>
      <description>We start with the 20 tokens. To complete this challenge we need to get some more.&#xA;Here is the original Token contract:&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.6.0; contract Token { mapping(address =&amp;gt; uint256) balances; uint256 public totalSupply; constructor(uint256 _initialSupply) { balances[msg.sender] = totalSupply = _initialSupply; } function transfer(address _to, uint256 _value) public returns (bool) { require(balances[msg.sender] - _value &amp;gt;= 0); balances[msg.sender] -= _value; balances[_to] += _value; return true; } function balanceOf(address _owner) public view returns (uint256 balance) { return balances[_owner]; } } Analysis Link to heading Let&amp;rsquo;s go line by line and see what we can come up with.</description>
    </item>
    <item>
      <title>Ethernaut, #5 Telephone</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-5-telephone/</link>
      <pubDate>Tue, 26 Jul 2022 15:47:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-5-telephone/</guid>
      <description>We need to claim ownership of the contract below to complete this level:&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Telephone { address public owner; constructor() { owner = msg.sender; } function changeOwner(address _owner) public { if (tx.origin != msg.sender) { owner = _owner; } } } Analysis Link to heading The changeOwner function requires that tx.origin != msg.sender.&#xA;We know that tx.origin always refers to the EOA (externally owned account) that started the transaction irrespective of the stack of contracts invoked:</description>
    </item>
    <item>
      <title>Ethernaut, #4 Coin Flip</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-4-coin-flip/</link>
      <pubDate>Tue, 26 Jul 2022 10:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-4-coin-flip/</guid>
      <description>To complete this challenge we need to predict the outcome of a coin flip game 10 times in a row. Here is the slightly altered version of the original smart contract:&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract CoinFlip { uint256 public consecutiveWins; uint256 lastHash; uint256 FACTOR = 57896044618658097711785492504343953926634992332820282019728792003956564819968; constructor() { consecutiveWins = 0; } function flip(bool _guess) public returns (bool) { uint256 blockValue = uint256(blockhash(block.number - 1)); if (lastHash == blockValue) { revert(); } lastHash = blockValue; uint256 coinFlip = blockValue / FACTOR; bool side = coinFlip == 1 ?</description>
    </item>
    <item>
      <title>Ethernaut, #3 Fallout</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-3-fallout/</link>
      <pubDate>Mon, 25 Jul 2022 15:53:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-3-fallout/</guid>
      <description>To complete this level we need to become owner of the contract below (slightly modified to be compatible with Solidity ^0.8.2):&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; import &amp;#34;openzeppelin/utils/math/SafeMath.sol&amp;#34;; contract Fallout { using SafeMath for uint256; mapping(address =&amp;gt; uint256) allocations; address payable public owner; /* constructor */ function Fal1out() public payable { owner = payable(msg.sender); allocations[owner] = msg.value; } modifier onlyOwner() { require(msg.sender == owner, &amp;#34;caller is not the owner&amp;#34;); _; } function allocate() public payable { allocations[msg.</description>
    </item>
    <item>
      <title>Ethernaut, #2 Fallback</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-2-fallback/</link>
      <pubDate>Sat, 23 Jul 2022 23:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-2-fallback/</guid>
      <description>To complete this level we need become the owner of the contract and reduce its balance to zero.&#xA;// SPDX-License-Identifier: MIT pragma solidity ^0.8.2; contract Fallback { mapping(address =&amp;gt; uint256) public contributions; address payable public owner; constructor() { owner = payable(msg.sender); contributions[msg.sender] = 1000 * (1 ether); } modifier onlyOwner() { require(msg.sender == owner, &amp;#34;caller is not the owner&amp;#34;); _; } function contribute() public payable { require(msg.value &amp;lt; 0.001 ether, &amp;#34;msg.</description>
    </item>
    <item>
      <title>Ethernaut, #1 Hello Ethernaut</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-1-hello/</link>
      <pubDate>Thu, 21 Jul 2022 14:48:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-1-hello/</guid>
      <description>Intro Link to heading The Ethernaut CTF game exists for more than 3 years already and has 26 challenges. The first one is a kind of introductory challenge that gives you steps on what you need to set up. If you have Metamask and open the browser&amp;rsquo;s console, you should see greeting messages:&#xA;Set up Link to heading Originally, this game runs on the Rinkeby test network, but we&amp;rsquo;re going to play it locally.</description>
    </item>
    <item>
      <title>CTF walkthrough, Intro</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-intro/</link>
      <pubDate>Tue, 19 Jul 2022 00:40:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-intro/</guid>
      <description>CTF&amp;rsquo;s / War games Link to heading CTF&amp;rsquo;s (Capture The Flags) are games/challenges focused on the Ethereum blockchain that help you to learn security techniques and concepts. These are the five popular CTF&amp;rsquo;s worth solving (in this order) to master your Ethereum/Solidity offensive security skills:&#xA;The Ethernaut is a wargame by OpenZeppelin. CaptureTheEther Damn Vulnerable DeFi Paradigm CTF 2021 Paradigm CTF 2022 (upcoming) Each level/challenge is a set of vulnerable smart contracts that you need to exploit.</description>
    </item>
    <item>
      <title>Proving TAPL in Coq (ch 3, WIP)</title>
      <link>https://vyorkin.org/posts/proving-tapl-in-coq-ch-3/</link>
      <pubDate>Sat, 07 Dec 2019 18:23:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/proving-tapl-in-coq-ch-3/</guid>
      <description>In order to understand things clearly and to learn Coq proof assistant at the same time, I&amp;rsquo;ve decided to do some proves while reading the TAPL book.&#xA;The code is on the GitHub.&#xA;For the excercises I want to use the ssreflect proof language instead of ltac. I&amp;rsquo;ll keep solutions to each chapter in a separate file. We&amp;rsquo;ll always work in the following context:&#xA;Set Implicit Arguments. Unset Strict Implicit. Unset Printing Implicit Defensive.</description>
    </item>
    <item>
      <title>Making of Tiger #6, Stack frames</title>
      <link>https://vyorkin.org/posts/making-of-tiger-6-stack-frames/</link>
      <pubDate>Sat, 21 Sep 2019 16:53:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-6-stack-frames/</guid>
      <description>Intro Link to heading In this post we&amp;rsquo;re going to add support for stack frames. Here I&amp;rsquo;ve made some notes while reading the chapter 6 to make sure I understand things clearly.&#xA;Stack Link to heading A stack is a region of memory that grows downward and shrinks upward (like icicles). The top of the stack is it&amp;rsquo;s lowest memory address. We treat stack as a big array, with a special register &amp;ndash; the stack pointer (SP).</description>
    </item>
    <item>
      <title>Making of Tiger #3, Parsing</title>
      <link>https://vyorkin.org/posts/making-of-tiger-3-parsing/</link>
      <pubDate>Sun, 08 Sep 2019 15:58:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-3-parsing/</guid>
      <description>Intro Link to heading In this chapter we’re going to build a parser for our Tiger language. First, let’s do a quick recap of some important concepts of the theory behind programming language parsers:&#xA;Parser generator is the most common type of compiler-compiler’s. It takes some formal grammar (typically it is a context-free grammar in BNF or EBNF form), that defines a syntax of a programming language. Tiger grammar with Menhir Link to heading While reading the current paragraph I highly recommend consulting the Tiger Language Reference Manual that has a precise description (along with a BNF notation) of everything we’re going to define below.</description>
    </item>
    <item>
      <title>Making of Tiger #2, Lexical Analysis</title>
      <link>https://vyorkin.org/posts/making-of-tiger-2-lexical-analysis/</link>
      <pubDate>Fri, 23 Aug 2019 00:01:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-2-lexical-analysis/</guid>
      <description>Intro Link to heading We need a way to translate a program written in one (human-friendly) language to another (machine-specific) language. Generally, this work is splitted into 2 parts: analysis and synthesis.&#xA;The synthesis-part (back end) is responsible for the code generation and optimizations.&#xA;Analysis-part (front end) is responsible for breaking the program apart to understand its structure and meaning. There are 3 commonly used analysis phases:&#xA;Lexical – breaking a sequence of characters into sequence of individual tokens (words) Syntax – parsing and checking that we have a valid sequence of tokens Semantic – gathering the program’s meaning, making sure that declarations and statements of program are semantically correct, this usually includes type checking In this post we’ll focus on implementing the lexical analysis phase.</description>
    </item>
    <item>
      <title>Making of Tiger #1, Intro</title>
      <link>https://vyorkin.org/posts/making-of-tiger-1-intro/</link>
      <pubDate>Thu, 22 Aug 2019 20:27:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-1-intro/</guid>
      <description>Recently I&amp;rsquo;ve started reading the book by Andrew W. Appel titled Modern compiler implementation in ML. I&amp;rsquo;ve picked it up because I&amp;rsquo;ve heard some really good reviews about the ML version of it. Also there are other editions available that use C and Java. Each chapter covers a single phase of the compilation process and comes with some initial ML code and programming excercies. At the end you will have a working optimizing compiler.</description>
    </item>
    <item>
      <title></title>
      <link>https://vyorkin.org/posts/posts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://vyorkin.org/posts/posts/</guid>
      <description>&lt;h2 id=&#34;making-of-tiger&#34;&gt;&#xA;  Making of Tiger &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;_compilers&#34;&gt;@compilers&lt;/span&gt;&lt;span class=&#34;compilers&#34;&gt;compilers&lt;/span&gt;&lt;span class=&#34;tiger&#34;&gt;tiger&lt;/span&gt;&lt;span class=&#34;ocaml&#34;&gt;ocaml&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-1-intro&#34;&gt;&#xA;  &lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #1, Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-1-intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Recently I&amp;rsquo;ve started reading the book by&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Andrew_Appel&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Andrew W. Appel&lt;/a&gt;&#xA;titled&#xA;&lt;a href=&#34;https://www.amazon.com/Modern-Compiler-Implement-Andrew-Appel/dp/0521607647&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern&#xA;compiler implementation in ML&lt;/a&gt;. I&amp;rsquo;ve picked it up because I&amp;rsquo;ve&#xA;heard some really good reviews about the ML version of it. Also&#xA;there are other editions available that use C and Java. Each&#xA;chapter covers a single phase of the compilation process and&#xA;comes with some initial ML code and programming excercies. At&#xA;the end you will have a working optimizing compiler.&lt;/p&gt;&#xA;&lt;p&gt;I&amp;rsquo;m building a compiler for the first time and it is a&#xA;lot of fun. In these blog post series, I&amp;rsquo;ll be working through&#xA;the book and explaining my solutions to each chapter.&lt;/p&gt;&#xA;&lt;h4 id=&#34;getting-started&#34;&gt;&#xA;  Getting started&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#getting-started&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;The author describes Tiger as a simple (but nontrivial) language&#xA;of the &lt;a href=&#34;https://en.wikipedia.org/wiki/ALGOL&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Algol family&lt;/a&gt;, which could be easily modified to be&#xA;functional or object-oriented (maybe I&amp;rsquo;ll skip the OO-part of&#xA;the book).&lt;/p&gt;&#xA;&lt;details&gt;&#xA;&lt;summary&gt;Here is an example program in Tiger&lt;/summary&gt;&#xA;&lt;div class=&#34;details&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-F90&#34; data-lang=&#34;F90&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a61717&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;prettyprint&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;) : &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt;: &lt;span style=&#34;color:#728e00&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;indent&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ident&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;else&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;indent&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;right&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#8a7b52&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;For my implementation I&amp;rsquo;ve decided to use OCaml. It is&#xA;&lt;a href=&#34;http://adam.chlipala.net/mlcomp/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;close&lt;/a&gt;&#xA;&lt;a href=&#34;https://stackoverflow.com/questions/699689/what-are-the-differences-between-sml-and-ocaml/699755#699755&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;enough&lt;/a&gt; to SML so with even basic ML experience it should be&#xA;fairly straightforward to port the code examples.&lt;/p&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Straight-line programs&lt;/p&gt;&#xA;&lt;p&gt;The first &amp;ldquo;warm-up&amp;rdquo; assignment is to implement a program&#xA;analyzer and interpreter for the &lt;strong&gt;straight-line&lt;/strong&gt; programming&#xA;language. We have the following types:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;binop&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Plus&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Minus&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Times&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Div&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Compound&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Assign&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;id&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Op&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;binop&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Eseq&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So for the following sample straight-line program&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-F90&#34; data-lang=&#34;F90&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;3&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;b&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#728e00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;), &lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;10&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;b&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The corresponding AST would be&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Compound&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;Assign&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Plus&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;Compound&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Assign&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;Eseq&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#434f54&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Minus&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)],&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#434f54&#34;&gt;Op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Times&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))),&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first task is to write a function&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function tells the maximum number of args of any &lt;code&gt;print&lt;/code&gt;&#xA;statement within any subexpression of a given statement.&lt;/p&gt;&#xA;&lt;p&gt;Sounds easy, right? The implementation is pretty straightforward&#xA;too:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Base&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Straightline&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs_exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Eseq&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exps&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exps&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp_lens&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;maxargs_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exps&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;max_exp_len&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;max_elt&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;compare&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Int&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;compare&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp_lens&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Int&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;len&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Option&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;max_exp_len&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Compound&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;exp1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp2&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l2&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;maxargs&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp2&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Int&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;max&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l1&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Assign&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(_,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;maxargs_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to write another function that &amp;ldquo;interprets&amp;rdquo;&#xA;program in this language.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A simple interpreter could look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Base&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Stdio&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Straightline&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Plus&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Minus&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Times&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Div&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env0&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env0&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;print_endline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Int&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;to_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Print&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exps&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;fold_left&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;init&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exps&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Assign&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Map&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;set&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Compound&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;stm1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm2&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm1&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;interp_stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm2&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Id&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Map&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;find_exn&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Num&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Op&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;exp1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp2&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp1&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env2&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp2&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eval&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;op&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env2&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Eseq&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;interp_stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stm&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;interp_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we&amp;rsquo;re just recursively traversing a tree, keeping a map of&#xA;identifiers, evaluating arithmetic operations and printing&#xA;values.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;excersises&#34;&gt;&#xA;  Excersises&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#excersises&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;A couple of more excercises about trees, nothing super exciting.&#xA;So I won&amp;rsquo;t paste the rest of my solutions here. To implement a&#xA;balanced-tree (ex. d) I&amp;rsquo;ve read the chapter about Red-Black&#xA;Trees in&#xA;&lt;a href=&#34;https://www.amazon.com/Purely-Functional-Data-Structures-Okasaki/dp/0521663504&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Okasaki&#xA;book.&lt;/a&gt; The code is&#xA;&lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/chapter1/rb_tree.ml&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Well, thats all for part 1! The next one is about lexical&#xA;analysis where we&amp;rsquo;ll write a simple lexer for the Tiger&#xA;language.&lt;/p&gt;&#xA;&lt;h4 id=&#34;conclusion&#34;&gt;&#xA;  Conclusion&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#conclusion&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;By the time I&amp;rsquo;ve decided to start writing this post I&amp;rsquo;ve already&#xA;finished reading 6th chapter and here are some first impressions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The book is clear and enjoyable to read. Programming&#xA;assignments and exercises are well thought out&lt;/li&gt;&#xA;&lt;li&gt;Implementing the typechecker (chapter 5) wasn&amp;rsquo;t easy, for me&#xA;it took a week to make it work and typecheck correctly every&#xA;given example program&lt;/li&gt;&#xA;&lt;li&gt;Chapter 6 feels easier (less code to write), but requires some&#xA;basic knowledge about microprocessor architectures (SPARK,&#xA;MIPS)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;I wouldn&amp;rsquo;t recommend starting with this book to someone with&#xA;zero compiler design knowledge. But it is definitely a must read&#xA;for people who already know the basics of compiler construction.&lt;/p&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-2-lexical-analysis&#34;&gt;&#xA;  &lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #2, Lexical Analysis &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;lexing&#34;&gt;lexing&lt;/span&gt;&lt;span class=&#34;ocamllex&#34;&gt;ocamllex&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-2-lexical-analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;We need a way to translate a program written in one&#xA;(human-friendly) language to another (machine-specific)&#xA;language. Generally, this work is splitted into 2 parts:&#xA;&lt;strong&gt;analysis&lt;/strong&gt; and &lt;strong&gt;synthesis&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;strong&gt;synthesis&lt;/strong&gt;-part (back end) is responsible for the code&#xA;generation and optimizations.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;-part (front end) is responsible for breaking the&#xA;program apart to understand its structure and meaning. There are&#xA;3 commonly used &lt;strong&gt;analysis&lt;/strong&gt; phases:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Lexical&lt;/strong&gt; – breaking a sequence of characters into sequence&#xA;of individual &lt;strong&gt;tokens&lt;/strong&gt; (words)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Syntax&lt;/strong&gt; – parsing and checking that we have a valid sequence&#xA;of tokens&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Semantic&lt;/strong&gt; – gathering the program’s meaning, making sure&#xA;that declarations and statements of program are semantically&#xA;correct, this usually includes type checking&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In this post we’ll focus on implementing the &lt;strong&gt;lexical analysis&lt;/strong&gt;&#xA;phase.&lt;/p&gt;&#xA;&lt;p&gt;A lexical &lt;strong&gt;token&lt;/strong&gt; is a string with an assigned and identified&#xA;meaning. This is a &lt;strong&gt;unit&lt;/strong&gt; in a grammar of a programming&#xA;language.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Example &lt;strong&gt;tokens&lt;/strong&gt;: identifiers, keywords, separators, operators&lt;/li&gt;&#xA;&lt;li&gt;Example &lt;strong&gt;non-tokens&lt;/strong&gt;: white-spaces, tabs, newlines, comments,&#xA;preprocessor directives, macroses&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Now, I’m going to skip everything related to finite automata and&#xA;regular expressions and go straight to the implementation of&#xA;&lt;strong&gt;lexer&lt;/strong&gt; (lexical analyzer). You can find a good intro to lexing&#xA;and parsing using &lt;code&gt;ocamllex&lt;/code&gt; and &lt;code&gt;menhir&lt;/code&gt; in the &lt;a href=&#34;http://dev.realworldocaml.org/parsing-with-ocamllex-and-menhir.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read World&#xA;OCaml book&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h4 id=&#34;example-lexer--morse-code&#34;&gt;&#xA;  Example lexer (morse code)&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#example-lexer--morse-code&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;We’ll start with the simplest possible example of building a&#xA;lexer for &lt;a href=&#34;https://en.wikipedia.org/wiki/Morse_code&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;morse code&lt;/a&gt;, the full source code is &lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/play/menhir/morse-code-simple/lexer.mll&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;dune&lt;/code&gt; file for our playground project is going to look like&#xA;this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;ocamllex&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;modules&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexer&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;executable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;driver&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;libraries&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;core&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stdio&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;preprocess&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;pps&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ppx_deriving.show&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;dev&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;flags&lt;/span&gt; (&lt;span style=&#34;color:#7f8c8d&#34;&gt;:standard&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;-warn-error&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;-A&lt;/span&gt;))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing fancy here. Next one is the &lt;code&gt;driver.ml&lt;/code&gt; module, this is&#xA;our entry point. It simply reads the given file, runs our lexer&#xA;and displays the resulting S-expression.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Core&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Syntax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tokens&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tok&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tok&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;tokens&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lex_print&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;ch&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;from_channel&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tokens&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;iter&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Format&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;show_exp&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;In_channel&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;with_file&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_print&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;spec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Command&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;Spec&lt;/span&gt;.&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;empty&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;anon&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;filename&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;%:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Command&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;basic_spec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;summary&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Run the lexer and display tokens&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;spec&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Command&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need a module to describe our tokens, lets call it&#xA;&lt;code&gt;syntax.ml&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* symbol *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* separator *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* end of file *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the lexer generator itself:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Syntax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Custom exception type for lexer errors *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;exception&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Regular expressions: *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* We use whitespace as a separator, so&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;   it is a valid token in our language *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;white&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;sym&lt;/span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Lexing rules: *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* New lines are separators too *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;new_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;sym&lt;/span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;white&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt;       &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Printf&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;sprintf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;At offset %d: unexpected character.&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lexeme_start&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eof&lt;/span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can parse the “hello world” sequence written in Morse&#xA;Code:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.... . .-.. .-.. ---&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.-- --- .-. .-.. -..&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output will be:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;....&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.-..&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.-..&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;---&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.--&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;---&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.-.&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.-..&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#434f54&#34;&gt;SEP&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;SYM&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-..&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;tiger-lexer&#34;&gt;&#xA;  Tiger lexer&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tiger-lexer&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Having that basic understanding of how to use the &lt;code&gt;ocamllex&lt;/code&gt; to&#xA;build lexers, we can try to build one for our Tiger language.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;dune&lt;/code&gt; file is going to remain the same as in the “morse&#xA;code” example above. There is a &lt;strong&gt;Tiger Language Reference Manual&#xA;in Appendix A&lt;/strong&gt; of the book where you can find the information&#xA;about the tokens we need: identifiers, comments, declarations,&#xA;data types, etc.&lt;/p&gt;&#xA;&lt;p&gt;For now, we don’t need to define a real AST data type.&lt;/p&gt;&#xA;&lt;details&gt;&#xA;&lt;summary&gt;The “mock” &lt;b&gt;syntax.ml&lt;/b&gt; module would suffice.&lt;/summary&gt;&#xA;&lt;div class=&#34;details&#34;&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TYPE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;VAR&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FUNCTION&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;BREAK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;END&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NIL&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LET&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DO&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TO&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FOR&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;WHILE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ELSE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;THEN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ARRAY&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ASSIGN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OR&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;AND&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NEQ&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EQ&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DIVIDE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TIMES&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;MINUS&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;PLUS&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DOT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACE&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEMICOLON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COLON&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COMMA&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&#xA;&lt;/details&gt;&#xA;&lt;p&gt;We want to focus on the lexer part. First, we might want to open&#xA;some commonly used modules and define a custom exception type&#xA;for lexing errors.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Syntax&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Base&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;exception&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need a few regular expressions:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;digit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* There are no negative integer literals in Tiger *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;digit&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;frac&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;digit&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;e&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]?&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;digit&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;frac&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exp&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;?&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;white&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;\r\n&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to &lt;strong&gt;Appendix A&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;An &lt;strong&gt;identifier&lt;/strong&gt; is a sequence of letters, digits and underscores, starting with a letter. Uppercase letters are distinguished from lowercase&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alphanum&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;id&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alphanum&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lexing rules.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;rule&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Whitespaces *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;white&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We want to skip the new lines.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;new_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have a separate function to read strings (see the&#xA;implementation below).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, according the &lt;strong&gt;Appendix A&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;A comment may appear between any two tokens. Comments start with &lt;code&gt;/*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt; and may be nested.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;We’ll have a separate function for reading comments (scroll down&#xA;to see its code).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Basic keywords:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TYPE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;VAR&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FUNCTION&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;BREAK&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;       &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OF&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;       &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IN&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;nil&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NIL&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LET&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ARRAY&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need 4 tokens for loops:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DO&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TO&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FOR&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;while&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;WHILE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Conditionals (&lt;code&gt;if-then-else&lt;/code&gt;):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operators:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* General *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ASSIGN&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Logical *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OR&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Comparison *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GT&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LT&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NEQ&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EQ&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Arithmetics *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DIVIDE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TIMES&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;MINUS&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;PLUS&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Separators:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DOT&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACE&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACK&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACK&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEMICOLON&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COLON&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COMMA&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Numbers, identifiers, error and EOF handling:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Int&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;of_string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;id&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Unexpected character: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eof&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rule to match string literals:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* If we reach the terminating double quote, then&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;   * we return the contents of the buffer as a STRING. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt;       &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;contents&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Handling escape sequences *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\012&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;n&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\r&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_char&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[^&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#39;\\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]+&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Buffer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;add_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;read_string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;buf&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Illegal string character: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;lexeme&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eof&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;String is not terminated&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rule to match comments (including nested comments), keeping&#xA;a list of where comments open:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Opening comment *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Closing comment *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;*/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#95a5a6&#34;&gt;(* No nested opened comments left, continue parsing. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_::&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Continue parsing comment. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;tl_exn&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;newline&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;new_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;read_comment&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* Unexpected end-of-file. Update the current location to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;   * point to the opening token that wasn&amp;#39;t closed and raise an error. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;eof&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;hd_exn&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;opened&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Unterminated comment&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;summary&#34;&gt;&#xA;  Summary&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#summary&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;We’ve learned some new things, like &lt;code&gt;ocamllex&lt;/code&gt;, but overall, it&#xA;wasn’t too hard to follow the book. The full OCaml source code&#xA;for the second chapter can be found &lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/chapter2/lexer.mll&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;. In the next part we’re&#xA;going to write a parser.&lt;/p&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-3-parsing&#34;&gt;&#xA;  &lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #3, Parsing &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;parsing&#34;&gt;parsing&lt;/span&gt;&lt;span class=&#34;menhir&#34;&gt;menhir&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-3-parsing&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;In this chapter we’re going to build a parser for our Tiger&#xA;language. First, let’s do a quick recap of some important&#xA;concepts of the theory behind programming language parsers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Parser generator&lt;/strong&gt; is the most common type of&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Compiler-compiler&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compiler-compiler’s&lt;/a&gt;. It takes some formal grammar (typically&#xA;it is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;context-free grammar&lt;/a&gt; in &lt;a href=&#34;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BNF&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EBNF &lt;/a&gt;form), that&#xA;defines a syntax of a programming language.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;tiger-grammar-with-menhir&#34;&gt;&#xA;  Tiger grammar with Menhir&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tiger-grammar-with-menhir&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;While reading the current paragraph I highly recommend&#xA;consulting the &lt;strong&gt;Tiger Language Reference Manual&lt;/strong&gt; that has a&#xA;precise description (along with a BNF notation) of everything&#xA;we’re going to define below.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://gallium.inria.fr/~fpottier/menhir/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Menhir&lt;/a&gt; is an LR(1) parser generator library for OCaml. It&#xA;&lt;a href=&#34;https://dune.readthedocs.io/en/stable/dune-files.html#menhir&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;integrates with Dune&lt;/a&gt; quiet nicely. All we need to do is to add&#xA;the &lt;code&gt;menhir&lt;/code&gt; stanza to our &lt;code&gt;dune&lt;/code&gt; file (the one from the&#xA;previous chapter). So the whole file will look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;menhir&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;modules&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parser&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;flags&lt;/span&gt; (&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;--dump&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;--explain&amp;#34;&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;ocamllex&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;modules&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexer&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;library&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ch3&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;inline_tests&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;libraries&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;core&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stdio&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;preprocess&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;pps&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ppx_inline_test&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ppx_expect&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;dev&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;flags&lt;/span&gt; (&lt;span style=&#34;color:#7f8c8d&#34;&gt;:standard&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;-warn-error&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;-A&lt;/span&gt;))))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the &lt;code&gt;--dump&lt;/code&gt; and &lt;code&gt;--explain&lt;/code&gt; switches:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;The &lt;code&gt;--dump&lt;/code&gt; switch means to write a description of the&#xA;automaton to the &lt;code&gt;.automaton&lt;/code&gt; file.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;code&gt;--explain&lt;/code&gt; switch helps us to understand severe conflicts in&#xA;terms of a grammar (rather than in terms of automaton),&#xA;enabling it means to write a textual explanation of detected&#xA;shift-reduce conflicts to the &lt;code&gt;.conflicts&lt;/code&gt; file. &lt;a href=&#34;http://ix.io/1SAS&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here is&#xA;the example&lt;/a&gt; of how it looks.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;See the &lt;a href=&#34;http://gallium.inria.fr/~fpottier/menhir/manual.html#sec37&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conflicts&lt;/a&gt; part of the Menhir manual for details.&lt;/p&gt;&#xA;&lt;p&gt;We’ll use the&#xA;&lt;a href=&#34;http://gallium.inria.fr/~fpottier/menhir/manual.html#sec23&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new&#xA;syntax&lt;/a&gt; for rules (despite the fact that it is considered&#xA;experimental). First, let’s define some&#xA;&lt;a href=&#34;http://gallium.inria.fr/~fpottier/menhir/manual.html#sec9&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;token&#xA;aliases&lt;/a&gt;, priorities and associativity levels. Basically these&#xA;are the same tokens we used in our lexer.&lt;/p&gt;&#xA;&lt;p&gt;Base keywords:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TYPE&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;VAR&lt;/span&gt;      &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FUNCTION&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;BREAK&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OF&lt;/span&gt;       &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;END&lt;/span&gt;      &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IN&lt;/span&gt;       &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NIL&lt;/span&gt;      &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;nil&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* nil denotes a value belonging to every record type *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LET&lt;/span&gt;      &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ARRAY&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Loop-related keywords:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DO&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TO&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FOR&lt;/span&gt;   &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;WHILE&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;while&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keywords for conditional expression:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IF&lt;/span&gt;   &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Operator tokens:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* General *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ASSIGN&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Logical *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;OR&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;AND&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Comparison *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GE&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;GT&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LE&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LT&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;NEQ&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EQ&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Arithmetics *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DIVIDE&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TIMES&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;PLUS&lt;/span&gt;   &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;MINUS&lt;/span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tokens for separators:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;DOT&lt;/span&gt;       &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACE&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACE&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LBRACK&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RBRACK&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SEMICOLON&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COLON&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COMMA&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Strings, numbers, identifiers and the &lt;code&gt;EOF&lt;/code&gt; token:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;STRING&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;&lt;/span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt;    &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;token&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Associativity of operators:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;nonassoc&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;     &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The grammar rules:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;start&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%%&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EOF&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Top-level expression:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;primitive&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;nil&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;break&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;create_rec&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;create_arr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;assignment&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;local&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;conditional&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;loop&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_call&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;unary&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;binary&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;seq&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might not be obvious from the &lt;code&gt;expr&lt;/code&gt; definition, but it also&#xA;includes a thing called &lt;code&gt;no value&lt;/code&gt; (an expression that yields no&#xA;value). So when looking at the top-level expression and&#xA;comparing it to the language reference manual, please note that&#xA;in our grammar &lt;code&gt;no_val := &amp;quot;(&amp;quot; &amp;quot;)&amp;quot;&lt;/code&gt; (empty &lt;code&gt;seq&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;There are two built-in (predefined) primitive types: &lt;code&gt;int&lt;/code&gt; and&#xA;&lt;code&gt;string&lt;/code&gt;. The grammar rule for those is pretty straightforward:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;primitive&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;int&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our language we have only one unary operator – minus:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;unary&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But we have two kinds of binary operators: &lt;code&gt;boolean&lt;/code&gt; and&#xA;“logical + arithmetic”, which we’ll simply call &lt;code&gt;bin&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;binary&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bin&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;boolean&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Scroll down to see the definitions of &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;boolean&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We have 2 kinds of loops: the &lt;code&gt;while&lt;/code&gt; loop and the &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;loop&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;while_loop&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;for_loop&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;while_loop&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;while&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;for_loop&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;for&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;do&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Nothing new or unusual. And the conditional expression rule is&#xA;also quite trivial:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;conditional&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;else&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;if&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;then&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Syntax for local bindings is going to be exactly like in OCaml&#xA;or SML:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;local&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;let&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;decs&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;in&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr_seq&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, a slightly more complex part – declarations.&lt;/p&gt;&#xA;&lt;p&gt;As stated in the Tiger language reference manual, a&#xA;declaration-sequence is a sequence of &lt;strong&gt;type&lt;/strong&gt;, &lt;strong&gt;value&lt;/strong&gt;, and&#xA;&lt;strong&gt;function declarations&lt;/strong&gt;. No punctuation separates or terminates&#xA;individual declarations.&lt;/p&gt;&#xA;&lt;p&gt;In terms of Menhir we can express it like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;decs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;dec&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;dec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_dec&lt;/span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* type *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;var_dec&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* value *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_dec&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* function declaration *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Ok, we need to define a separate rule for each declaration&#xA;mentioned above.&lt;/p&gt;&#xA;&lt;p&gt;To declare a data type in the Tiger language we start with the&#xA;keyword &lt;code&gt;type&lt;/code&gt;, after which comes the identifier, the equality&#xA;token and the type declaration body:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_dec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The type declaration could be a &lt;strong&gt;record&lt;/strong&gt;, an &lt;strong&gt;array&lt;/strong&gt; or a &lt;strong&gt;type&#xA;alias&lt;/strong&gt; (any identifier):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;braced&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;ty_fields&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* records *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* arrays *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_fields&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;separated_list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_field&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_field&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_ann&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As per language reference manual, there are two possible ways to&#xA;declare a variable: with or without type annotation. The&#xA;following rule reflects this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;var_dec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;         &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;var&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_ann&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The record and array creation rules below are also considered&#xA;top-level expressions:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;create_rec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;braced&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;init_rec_fields&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;create_arr&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bracketed&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;of&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;init_rec_fields&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;separated_list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;init_rec_field&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;init_rec_field&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need a function declaration rule:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_dec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* procedures doesn&amp;#39;t return values *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_head&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_body&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* functions return values and the type is specified after the colon *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_head&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_body&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_head&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_params&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_body&lt;/span&gt;   &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_params&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parenthesized&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;ty_fields&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;According to our language spec:&lt;/p&gt;&#xA;&lt;p&gt;&amp;gt; An &lt;code&gt;l-value&lt;/code&gt; is a location, whose value may be read or assigned.&#xA;&amp;gt; Variables, procedure parameters, fields or records, and&#xA;elements are all &lt;code&gt;l-values&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* variable *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* everything else *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue_t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue_t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* simple record field *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* compound record field *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue_t&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* simple array subscript *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bracketed&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* compund array subscript *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue_t&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bracketed&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Assignment of an expression to &lt;code&gt;lvalue&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;assignment&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lvalue&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sequence of expressions delimited by semicolon:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr_seq&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;separated_list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;seq&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parenthesized&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;expr_seq&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function call rule:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_call&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parenthesized&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;fun_args&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_args&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;separated_list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;);&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Arithmetic, comparison and equality expressions:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bin&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bin_op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bin_op&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;lt;&amp;gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;=&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Boolean expressions:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;boolean_op&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;boolean_op&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;amp;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;|&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Helper rule for a type annotation which we used in the &lt;code&gt;var_dec&lt;/code&gt;&#xA;and &lt;code&gt;ty_field&lt;/code&gt; above:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ty_ann&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Menhir allows us to declare functions, so these are three helper&#xA;functions that we used everywhere else for delimited&#xA;expressions:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parenthesized&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;delimited&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;bracketed&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;delimited&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;braced&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;delimited&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;{&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;test-suite&#34;&gt;&#xA;  Test suite&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#test-suite&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;In order to iterate on our parser quickly we want to automate&#xA;the process of testing it against the &lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/book/testcases/test1.tig&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;provided example programs&lt;/a&gt;.&#xA;The most convenient way to do that would be to create a test&#xA;suite that we could run after every change we make.&lt;/p&gt;&#xA;&lt;p&gt;Some of the provided example Tiger programs are intentionally&#xA;broken, so we want to skip those:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test16.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test17.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test19.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test20.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test25.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test45.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;test49.tig&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A couple of helper functions to list the example programs&#xA;(recursively):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;is_tig_ext&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(_,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ext&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;split_extension&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ext&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Some&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;tig&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;is_tig_file&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;Sys&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;is_file_exn&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;follow_symlinks&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;is_tig_ext&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ls_rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;is_tig_file&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;not&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mem&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;skipped&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;basename&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;equal&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:(=))&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Sys&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;ls_dir&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;|&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;concat_map&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;sub&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ls_rec&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;dir&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;sub&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s add another helper function to get current position along&#xA;with a filename as a string. We’ll need it later to output an&#xA;error location:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;position&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;col&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;pos_cnum&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;pos_bol&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;Printf&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;sprintf&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;%s:%d:%d&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;pos_fname&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;pos_lnum&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;col&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And another two functions to run the parser and print the error&#xA;details in case of failure:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse_with_error&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;try&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;Parser&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexer&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;read&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;assert_bool&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Ok&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;SyntaxError&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;msg&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;assert_failure&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;position&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34; : &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;msg&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Parser&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;Error&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;assert_failure&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Syntax error: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;position&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lexing&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;from_channel&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lex_curr_p&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;pos_fname&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;basename&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;};&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;parse_with_error&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lexbuf&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the function that we’re going to call for each &lt;code&gt;.tig&lt;/code&gt;&#xA;file:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;run_parser&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;In_channel&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;with_file&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;parse&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, the test suite is going to look like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;suite&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;tiger programs&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;:::&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tests_dir&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;../../../book&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;dir_sep&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;^&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;testcases&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tests_path&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parent_dir_name&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tests_dir&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tig_files&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ls_rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tests_path&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#434f54&#34;&gt;Filename&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;basename&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;run_parser&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#434f54&#34;&gt;tig_files&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;run_test_tt_main&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;suite&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The dune file for our test suite project will simply run the&#xA;&lt;code&gt;testsuite.exe&lt;/code&gt; executable:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;executable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;testsuite&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;libraries&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;base&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;core&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ch3&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;oUnit&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;alias&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;runtest&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;action&lt;/span&gt; (&lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;/testsuite.exe&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it’ll be much easier to work on the parser implementation.&#xA;Also this test suite might be useful to detect possible&#xA;regressions if we want to change the parser in the future.&lt;/p&gt;&#xA;&lt;h4 id=&#34;conclusion&#34;&gt;&#xA;  Conclusion&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#conclusion&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Of course, I didn’t come up with this grammar right away. I&#xA;spent almost a week implementing this parser. I started with a&#xA;simple parser for “straightline programs” and iterated on it&#xA;until it evolved to the fully functional Tiger-language grammar.&#xA;And it took some time for me to figure out how to resolve all&#xA;the shift-reduce conflicts.&lt;/p&gt;&#xA;&lt;p&gt;Another cool feature of Menhir is its REPL, which might be&#xA;helpful for debugging. This is especially useful when you&#xA;already caught a parser error by running the test suite and now&#xA;you want to try constructing an invalid expression to check your&#xA;hypothesis. I used this kind of workflow a lot while working on&#xA;this grammar.&lt;/p&gt;&#xA;&lt;p&gt;You can run the interpreter like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;menhir --interpret --interpret-show-cst parser.mly&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can start typing expressions until you find something&#xA;that breaks your parser. Note that you can’t use token aliases&#xA;inside this REPL.&lt;/p&gt;&#xA;&lt;p&gt;For example, here is how you can test a function declaration:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;LET&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FUNCTION&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COLON&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;COLON&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EQ&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IF&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;EQ&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;TIMES&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;MINUS&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;IN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ID&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;LPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;INT&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;RPAREN&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;END&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That’s it for now. The full source code for this chapter&#xA;&lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/chapter3/lib/parser.mly&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is&#xA;here&lt;/a&gt;. Next time we’re going to work on the AST for our Tiger&#xA;language.&lt;/p&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-4-abstact-syntax&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Making of Tiger #4, Abstract Syntax &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;ast&#34;&gt;ast&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-4-abstact-syntax&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-5-semantic-analysis&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Making of Tiger #5, Semantic Analysis &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;type_checking&#34;&gt;type-checking&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-5-semantic-analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;I really enjoyed working through this chapter, but at the same&#xA;time implementing the type-checking phase was a bit more&#xA;difficult than working on AST, parser or lexer from the previous&#xA;chapters.&lt;/p&gt;&#xA;&lt;h3 id=&#34;making-of-tiger-6-stack-frames&#34;&gt;&#xA;  &lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #6, Stack frames &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;stack&#34;&gt;stack&lt;/span&gt;&lt;span class=&#34;memory&#34;&gt;memory&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#making-of-tiger-6-stack-frames&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;In this post we&amp;rsquo;re going to add support for stack frames.&#xA;Here I&amp;rsquo;ve made some notes while reading the chapter 6 to make sure I&#xA;understand things clearly.&lt;/p&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Stack&lt;/p&gt;&#xA;&lt;p&gt;A stack is a region of memory that grows downward and shrinks&#xA;upward (like icicles). The top of the stack is it&amp;rsquo;s &lt;code&gt;lowest&lt;/code&gt;&#xA;memory address. We treat stack as a big array, with a&#xA;special register &amp;ndash; the &lt;strong&gt;stack pointer (SP)&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The stack &lt;strong&gt;grows&lt;/strong&gt; only at the entry to a function, by the&#xA;increment large enough to hold all the local variables for that&#xA;function. The stack &lt;strong&gt;shrinks&lt;/strong&gt; at the exit from the function by&#xA;the same amount.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Stack frame (SF)&lt;/p&gt;&#xA;&lt;p&gt;We need a stack frame abstraction because:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Local variables are pushed/popped in large batches on function&#xA;entry/exit&lt;/li&gt;&#xA;&lt;li&gt;When local variables created they are not always initialized&#xA;right away&lt;/li&gt;&#xA;&lt;li&gt;After many variables have been pushed, we want to continue&#xA;accessing variables deep within the stack&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;A stack frame consists of:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Some of local variables (others are kept in CPU registers)&lt;/li&gt;&#xA;&lt;li&gt;Return address (where control should return after completion&#xA;of the current function)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#temporaries-and-labels&#34; &gt;Temporaries&lt;/a&gt; and saved registers&lt;/li&gt;&#xA;&lt;li&gt;Outgoing/incoming arguments&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Another name for a stack frame is a function &lt;strong&gt;activation&#xA;record&lt;/strong&gt;. Stack frame layout depends on the &lt;a href=&#34;https://en.wikipedia.org/wiki/Instruction_set_architecture&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ISA&lt;/a&gt; and the&#xA;programming language being compiled.&lt;/p&gt;&#xA;&lt;p&gt;Here is a typical stack frame layout:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :             (higher addresses)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :             previous frame&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| i1 | [FP+8]      (2-nd argument)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| i2 | [FP+4]      (1-st argument)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| SL | [FP]        (static link)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| l1 | [FP-4]      (1-st local variable)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| l2 | [FP-8]      (2-nd local variable)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| lk | [FP-k*4]    (k-nd local variable)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| RA | [FP-k*4-k]  (return address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| t1 |             (1-st temp) temporaries and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| t2 |             (2-nd temp) saved registers&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| o1 |             (1-st outgoing arg) outgoing&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| o2 |             (2-nd outgoing arg) arguments&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;| SP | [FP-?]      (current stack pointer)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-------------------------------------------------&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :             next frame&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;:    :             (lower addresses)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Stack pointer (SP)&lt;/p&gt;&#xA;&lt;p&gt;Always points to the top of the stack (lowest memory address in&#xA;a stack).&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Frame pointer (FP)&lt;/p&gt;&#xA;&lt;p&gt;A term we use for convenience.&lt;/p&gt;&#xA;&lt;p&gt;On entry to some function &lt;code&gt;f&lt;/code&gt; we allocate a new stack frame (SF) by&#xA;subtracting the frame size from the SP and the old FP is saved&#xA;in the stack frame (SF).&lt;/p&gt;&#xA;&lt;p&gt;Basically, if the frame size is fixed: &lt;code&gt;FP = SP + size(SF)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;On function &lt;strong&gt;enter&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SF[0...k] = V[0...k]&lt;/code&gt; (put local variables in SF)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;SF[k + 1] = FP&lt;/code&gt; (save the current FP in SF)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;FP = SP&lt;/code&gt; (old SP becomes the current FP)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;On function &lt;strong&gt;exit&lt;/strong&gt;:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;SP = FP&lt;/code&gt; (copy FP back to SP)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;FP = SF[k + 1]&lt;/code&gt; (fetch back the saved FP)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The size of stack frame (SF) is not known until quite late in the compilation&#xA;process, but we want to know the offsets of function arguments&#xA;and local variables much earlier. We put args and locals right&#xA;near the FP at offsets that are known early (&lt;a href=&#34;#temporaries-and-labels&#34; &gt;temporaries&lt;/a&gt; and&#xA;saved registers are known later).&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Registers&lt;/p&gt;&#xA;&lt;p&gt;We want to use CPU registers as much as possible to make&#xA;compiled programs run faster. Also we have a limited set of&#xA;registers available and many functions that use them. We must be&#xA;able to save and restore them (to/from a stack frame).&lt;/p&gt;&#xA;&lt;p&gt;We say that a register is &lt;strong&gt;caller-save&lt;/strong&gt; if the caller must save&#xA;and restore it, otherwhise it is &lt;strong&gt;callee-save&lt;/strong&gt;. Which registers&#xA;are preserved depends on the machine architecture.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Parameters and returns addresses&lt;/p&gt;&#xA;&lt;p&gt;In the early days (in 70&amp;rsquo;s) on most machines function arguments&#xA;and return addresses were always passed on the stack. On modern&#xA;machines, for efficiency (to avoid high memory traffic), the&#xA;first several arguments, result and return address are passed in&#xA;registers. The rest args are passed in memory.&lt;/p&gt;&#xA; &lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Why and how usage of registers helps&lt;/p&gt;&#xA;&lt;p&gt;Suppose &lt;code&gt;f(a, b, c)&lt;/code&gt; calls &lt;code&gt;g(x, y, z)&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;f&lt;/code&gt; receives its args in registers \( r_1, r_2 \) and \( r_3&#xA;\), but it must pass the args &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;z&lt;/code&gt; in the same&#xA;registers \( r_1, r_2 \) and \( r_3 \). So the &lt;code&gt;f&lt;/code&gt; should save&#xA;those registers to its stack frame before calling &lt;code&gt;g&lt;/code&gt; and we&amp;rsquo;re back&#xA;to the memory traffic problem.&lt;/p&gt;&#xA;&lt;p&gt;So how the usage of registers saved any time?&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Leaf&lt;/strong&gt; procedures &amp;ndash; those that don&amp;rsquo;t call other procedures.&#xA;The most procedures called are leafs which need not write&#xA;their incoming args to memory. And often they don&amp;rsquo;t need to&#xA;allocate a stack frame at all.&lt;/li&gt;&#xA;&lt;li&gt;Interprocedural &lt;a href=&#34;https://en.wikipedia.org/wiki/Register_allocation&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;register allocation&lt;/a&gt;. A technique used by some&#xA;optimizing compilers to analyze all the functions in an&#xA;entire program at once and assign them different registers in&#xA;which to receive parameters and hold local variables.&lt;/li&gt;&#xA;&lt;li&gt;Sometimes &lt;code&gt;f&lt;/code&gt; doesn&amp;rsquo;t need its args anymore by the time it&#xA;calls &lt;code&gt;g&lt;/code&gt;, so it can just overwrite corresponding registers.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Register_window&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Register windows&lt;/a&gt; available on some architectures. Each&#xA;function can allocate a fresh set of registers without memory&#xA;traffic.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA; &lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How incoming parameters are passed&lt;/p&gt;&#xA;&lt;p&gt;The first &lt;code&gt;k&lt;/code&gt; args \( a_1, \dots, a_k \) are passed in registers and&#xA;the rest \( a_{k+1} ,\dots, a_n \) are placed at the end of the&#xA;callers own frame.&lt;/p&gt;&#xA;&lt;p&gt;If the callee needed to write any of these arguments&#xA;(including those passed in registers) to memory, it would write&#xA;them to the very beginning of its own stack frame.&lt;/p&gt;&#xA;&lt;p&gt;For simplicity we&amp;rsquo;ll assume that by default everything is passed&#xA;and kept in registers, except for cases when:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;variable is passed by reference&lt;/li&gt;&#xA;&lt;li&gt;variable is accessed by a nested function&lt;/li&gt;&#xA;&lt;li&gt;variable is too big to fit into a single register&lt;/li&gt;&#xA;&lt;li&gt;array variables&lt;/li&gt;&#xA;&lt;li&gt;register holding the variable is needed for some other purpose&lt;/li&gt;&#xA;&lt;li&gt;there are many local variables and temporary values that they&#xA;won&amp;rsquo;t all fit in registers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Escaping variables&lt;/p&gt;&#xA;&lt;p&gt;Variable &lt;strong&gt;escapes&lt;/strong&gt; if:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;It is passed by reference&lt;/li&gt;&#xA;&lt;li&gt;It is accessed from a nested function&lt;/li&gt;&#xA;&lt;li&gt;Its address is taken (not applicable for Tiger)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;But when the compiler sees a formal parameter or local variable&#xA;for the first time it doesn&amp;rsquo;t yet know whether it escapes and&#xA;how many registers the calculation will require.&lt;/p&gt;&#xA;&lt;p&gt;So we must assign some provisional locations (see the&#xA;&lt;code&gt;alloc_local&lt;/code&gt; function) to all formals and locals, and decide&#xA;later which of them should really go in registers.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Static link (SL)&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Block structure&lt;/strong&gt; &amp;ndash; a feature that allow the inner functions&#xA;use variables declared in outer functions&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Static link (SL)&lt;/strong&gt; &amp;ndash; a pointer to the function statically&#xA;enclosing the current one&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Static links are stored in stack frames.&lt;/p&gt;&#xA;&lt;p&gt;Example of program with nested functions in Tiger.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-F90&#34; data-lang=&#34;F90&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a61717&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;right&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a61717&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;prettyprint&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;) : &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt;: &lt;span style=&#34;color:#728e00&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;       &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;---&lt;/span&gt; [&lt;span style=&#34;color:#8a7b52&#34;&gt;2&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;let&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;indent&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;: &lt;span style=&#34;color:#434f54&#34;&gt;string&lt;/span&gt;) &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;do&lt;/span&gt;               &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;---&lt;/span&gt; [&lt;span style=&#34;color:#8a7b52&#34;&gt;5&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt; :&lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;concat&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#728e00&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;then&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ident&lt;/span&gt;(&lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;)                    &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;---&lt;/span&gt; [&lt;span style=&#34;color:#8a7b52&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#728e00&#34;&gt;else&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;indent&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;key&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;left&lt;/span&gt;);             &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;---&lt;/span&gt; [&lt;span style=&#34;color:#8a7b52&#34;&gt;4&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#434f54&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;right&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        )&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;(&lt;span style=&#34;color:#8a7b52&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#434f54&#34;&gt;tree&lt;/span&gt;);                         &lt;span style=&#34;color:#728e00&#34;&gt;&amp;lt;---&lt;/span&gt; [&lt;span style=&#34;color:#8a7b52&#34;&gt;1&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;output&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;&#xA;&lt;li&gt;&lt;code&gt;prettyprint&lt;/code&gt; calls &lt;code&gt;show&lt;/code&gt;, passing &lt;code&gt;prettyprint&lt;/code&gt;&amp;rsquo;s own frame&#xA;pointer (FP) as &lt;code&gt;show&lt;/code&gt;&amp;rsquo;s static link (SL)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;show&lt;/code&gt; stores its static link (SL) into its own stack frame&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;show&lt;/code&gt; calls &lt;code&gt;indent&lt;/code&gt;, passing its own frame pointer (FP) as&#xA;&lt;code&gt;indent&lt;/code&gt;&amp;rsquo;s SL&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;show&lt;/code&gt; calls &lt;code&gt;show&lt;/code&gt;, passing its own static link as SL&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;indent&lt;/code&gt; uses the value &lt;code&gt;n&lt;/code&gt; from &lt;code&gt;show&lt;/code&gt;&amp;rsquo;s frame, it can find&#xA;&lt;code&gt;n&lt;/code&gt; by using the SL (which points at the stack frame of&#xA;&lt;code&gt;show&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Each call requires a one or more fetches using static links to resolve&#xA;variables declared in outer functions.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;interface&#34;&gt;&#xA;  Interface&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#interface&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Stack frame and calling conventions&lt;/p&gt;&#xA;&lt;p&gt;Every machine architecture might have a different standard stack&#xA;frame layout.&lt;/p&gt;&#xA;&lt;p&gt;Suppose we have a call of the following function &lt;code&gt;g(x1, x2, x3)&lt;/code&gt;&#xA;where the 1-st parameter escapes. Here is an example of how the&#xA;&lt;code&gt;Frame.mk g [true; false; false]&lt;/code&gt; works on three different&#xA;architecture.&lt;/p&gt;&#xA; &lt;style&gt;&#xA; .sane-table table {&#xA;   border-collapse: collapse;&#xA;   width: 100%;&#xA; }&#xA; .sane-table th,&#xA; .sane-table td {&#xA;   padding: 0.25rem;&#xA;   text-align: center;&#xA;   border: 0;&#xA; }&#xA; .list-table table {&#xA;   width: 30rem;&#xA; }&#xA; .list-table td {&#xA;   text-align: left;&#xA; }&#xA; &lt;/style&gt;&#xA; &lt;div class=&#34;ox-hugo-table sane-table&#34;&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Architecture&lt;/th&gt;&#xA;&lt;th&gt;Formals&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;Pentium&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;[InFrame 8; InFrame 12; InFrame 16]&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;MIPS&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;[InFrame 0; InReg t157; InReg t158]&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;SPARC&lt;/td&gt;&#xA;&lt;td&gt;&lt;code&gt;[InFrame 8; InReg t157; InReg t158]&lt;/code&gt;&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA; &lt;/div&gt;&#xA; &lt;div class=&#34;ox-hugo-table sane-table&#34;&gt;&#xA;&lt;table&gt;&#xA;&lt;thead&gt;&#xA;&lt;tr&gt;&#xA;&lt;th&gt;Pentium&lt;/th&gt;&#xA;&lt;th&gt;MIPS&lt;/th&gt;&#xA;&lt;th&gt;SPARC&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/thead&gt;&#xA;&lt;tbody&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;\( SF_{SP+0} \leftarrow FP \)&lt;/td&gt;&#xA;&lt;td&gt;\( SP \leftarrow SP-k \)&lt;/td&gt;&#xA;&lt;td&gt;SAVE \(\ SP \), \( -k \), \(\ SP \)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;\( FP \leftarrow SP \)&lt;/td&gt;&#xA;&lt;td&gt;\( SF_{SP+k+0} \leftarrow r_2 \)&lt;/td&gt;&#xA;&lt;td&gt;\( SF_{FP+68} \leftarrow i_0 \)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;\( SP \leftarrow SP-k \)&lt;/td&gt;&#xA;&lt;td&gt;\( t_{157} \leftarrow r_4 \)&lt;/td&gt;&#xA;&lt;td&gt;\( t_{157} \leftarrow i_1 \)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;tr&gt;&#xA;&lt;td&gt;&lt;/td&gt;&#xA;&lt;td&gt;\( t_{157} \leftarrow r_5 \)&lt;/td&gt;&#xA;&lt;td&gt;\( t_{158 }\leftarrow i_2 \)&lt;/td&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA; &lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;\(SF\) &amp;ndash; Stack frame memory region&lt;/li&gt;&#xA;&lt;li&gt;\(k\)  &amp;ndash; Number of formal parameters&lt;/li&gt;&#xA;&lt;li&gt;\(t\)  &amp;ndash; Temporary location&lt;/li&gt;&#xA;&lt;li&gt;\(r_i\) &amp;ndash; MIPS registers&lt;/li&gt;&#xA;&lt;li&gt;\(i_i\) &amp;ndash; SPARC registers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Thats why we&amp;rsquo;ll use an abstract interface for stack frames.&lt;/p&gt;&#xA;&lt;p&gt;Most of PC&amp;rsquo;s and laptops are based on the x86 and x64 ISA.&#xA;Mobile devices usually based on the ARM ISA.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;x86&lt;/strong&gt; &amp;ndash; family of (32-bit) ISA based on the Intel 8086 and 8088 microprocessors&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;x64&lt;/strong&gt; &amp;ndash; a 64-bit version of the x86 ISA supporting larger&#xA;amounts of virtual and physical memory + additional&#xA;general-purpose registers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;x86&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Has 8 general-purpose registers: &lt;code&gt;eax, ebx, ecx, edx, ebp, esp, esi, edi&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;32-bit (4-byte) &lt;a href=&#34;https://en.wikipedia.org/wiki/Word_%28computer_architecture%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;words&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;x64&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Has 16 general-purpose registers: &lt;code&gt;rax, rbx, rcx, rdx, rbp, rsp, rsi, rdi&lt;/code&gt;, &lt;code&gt;r8 - r15&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;64-bit (8-byte) words&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Lets use the x64 ISA, there are 2 flavours of it:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Microsoft x64&lt;/li&gt;&#xA;&lt;li&gt;System V AMD64 (which I prefer)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;According to the System V AMD64 ABI, the first 6 integer&#xA;arguments are passed in left-to-right order in &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt;,&#xA;&lt;code&gt;rcx&lt;/code&gt;, &lt;code&gt;r8&lt;/code&gt; and &lt;code&gt;r9&lt;/code&gt; registers, respectively.&lt;/p&gt;&#xA;&lt;p&gt;Arguments 5 and higher are passed in memory. They are pushed&#xA;onto the stack in reversed (right-to-left) order.&lt;/p&gt;&#xA;&lt;p&gt;Helpful links:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;System&#xA;V AMD64 ABI&lt;/a&gt; (page 12)&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/X86_calling_conventions&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Calling&#xA;conventions (Wikipedia)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.osdev.org/Calling_Conventions&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Calling&#xA;conventions (OS Dev)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Here is our interface for a stack frame:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Holds information about formal parameters and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    local variables allocated in this frame *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Abstract location of a formal parameter (function argument) or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    a local variable that may be placed in a frame or in a register *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Makes a new frame for a function with the&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    given label and formal parameters *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Extracts a list of accesses denoting&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    the locations where the formal parameters will be&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    kept at runtime, as seen from inside the callee *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Allocates a new local variable in the given frame or in a register.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    The boolean argument specifies whether the new variable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    escapes and needs to go in the frame.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    Returns &amp;#34;in-memory&amp;#34; access with an offset from the frame pointer or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    &amp;#34;in-register&amp;#34; access in case if it can be allocated in a register *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alloc_local&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To make a new frame for some function &lt;code&gt;f&lt;/code&gt; we&amp;rsquo;ll call &lt;code&gt;Frame.mk label formals&lt;/code&gt;, where:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;label: Temp.label&lt;/code&gt; &amp;ndash; static memory address of the &lt;code&gt;f&lt;/code&gt;&#xA;function (that is yet to be determined)&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;formals: bool list&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; for each parameter&#xA;that escapes and &lt;code&gt;false&lt;/code&gt; for each that doesn&amp;rsquo;t&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The stack frame should contain information about formal&#xA;parameters and local variables allocated:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* label at which the function&amp;#39;s machine code begins *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* locations of all the formals *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* number of locals allocated so far *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ref&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* instructions required to implement the &amp;#34;view shift&amp;#34; *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;instrs&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Instruction&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t want to implement the &lt;a href=&#34;#view-shift&#34; &gt;view shift&lt;/a&gt; right now, so the&#xA;&lt;code&gt;Instruction.t&lt;/code&gt; is defined like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;ABI&lt;/p&gt;&#xA;&lt;p&gt;Lets add some constants for System V ADM64 ABI to the &lt;code&gt;Frame&lt;/code&gt;&#xA;module. We&amp;rsquo;ll need them later.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* word size in bytes *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;word_size&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;64&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* = 8 bytes *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* special registers *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rbp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* frame pointer *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;sp&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rsp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* stack pointer *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* x64 &amp;#34;parameter&amp;#34;-registers *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rdi&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rdi&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rsi&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rsi&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rdx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rdx&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rcx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rcx&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&#x9;&lt;span style=&#34;color:#434f54&#34;&gt;r8&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r8&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r9&lt;/span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r9&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;arg_regs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;rdi&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rsi&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rdx&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r8&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r9&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* other x64 registers *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rbx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;rbx&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r10&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r10&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r11&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r11&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r12&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r12&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r13&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r13&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r14&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r14&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r15&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;r15&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* registers that are preserved by the caller *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;caller_regs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;r10&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r11&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* registers that are preserved by the callee *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;callee_regs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;rbx&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r12&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r13&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r14&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r15&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Access&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;access&lt;/code&gt; data type describes location of a formal parameter&#xA;or a local variable that may be placed in a frame or in a&#xA;register:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#95a5a6&#34;&gt;(* memory location at the specific offset from the frame pointer *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;InFrame&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* register location *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;InReg&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rest of the &lt;code&gt;Frame&lt;/code&gt; module implementation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* creates a new location for a formal parameter or&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;   a local variable, given its index and [esc] flag *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk_access&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;InFrame&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;word_size&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* escapes - alloc in frame *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;InReg&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(* doesn&amp;#39;t escape - use temp (register) *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* makes a new stack frame *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mapi&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk_access&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* don&amp;#39;t know yet what instructions we need,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;     so just leave it empty for now *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;instrs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;instrs&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* local variables that do not escape can be allocated in a register,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;   escaping variables must be allocated in the frame *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alloc_local&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;function&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;incr&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;offset&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(!&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;locals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;word_size&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;InFrame&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;offset&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;InReg&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;alloc_local&lt;/code&gt; allocates a new local variable in the given frame&#xA;or &lt;a href=&#34;#temporaries-and-labels&#34; &gt;in a register&lt;/a&gt;. The boolean argument specifies whether the new&#xA;variable escapes and needs to go in the frame. Returns in-memory&#xA;access with an offset from the frame pointer.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;alloc_local t true&lt;/code&gt;&#xA;: → &lt;code&gt;InFrame -4&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;alloc_local t true&lt;/code&gt;&#xA;: → &lt;code&gt;InFrame -8&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;alloc_local t false&lt;/code&gt;&#xA;: → &lt;code&gt;InReg t1&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;alloc_local t false&lt;/code&gt;&#xA;: → &lt;code&gt;InReg t2&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;A clever compiler might optimize the frame size by noticing when&#xA;two frame-resident variables could be allocated to the same&#xA;slot.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Temporaries and labels&lt;/p&gt;&#xA;&lt;p&gt;We need a couple of more abstractions to represent a&#xA;&amp;ldquo;not known yet&amp;rdquo; register and machine-language locations:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Temporary&lt;/strong&gt; &amp;ndash; an abstract name for a value that is&#xA;temporarily held in some register&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Label&lt;/strong&gt; (just like label in assembly language) &amp;ndash; an abstract&#xA;name for a static machine-language location whose exact&#xA;address is yet to be determined&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The &lt;code&gt;Temp&lt;/code&gt; module manages these two distinct sets of names:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Abstract name for a local variable that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    is temporarily held in a register *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Abstract name for a static memory address that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    is yet to be determined *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Returns a new temporary from an infinite set of temporaries *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Returns a new [label], whose assembly-language name is&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    the given string (if given), otherwise it is generated. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk_label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The implementation of the &lt;code&gt;Temp&lt;/code&gt; module:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;S&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Symbol&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Symbol&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;incr&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk_label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(-&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Some&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;symbol&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;s&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;incr&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;string_of_int&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;idx&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;S&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;symbol&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;View shift&lt;/p&gt;&#xA;&lt;p&gt;Function arguments are seen differently by the caller and the&#xA;callee. In the book this is referred to as the view shift. For&#xA;example, a caller my put a parameter into register \(r_6\), but&#xA;the callee may want to access it from register \(r_9\). We want&#xA;to handle this view shift in the &lt;code&gt;Frame&lt;/code&gt; module.&lt;/p&gt;&#xA;&lt;p&gt;For each formal parameter we should calculate:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How it will be seen by callee (in a register, or in a frame&#xA;location)&lt;/li&gt;&#xA;&lt;li&gt;What instructions are required to implement this view shift&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;To keep things simple, we are not going to implement this right&#xA;now.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Static links&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;Frame&lt;/code&gt; module should not know anything about &lt;a href=&#34;#static-link--sl&#34; &gt;static links&lt;/a&gt;,&#xA;because we want it be independent of any specific source&#xA;language being compiled. We&amp;rsquo;ll use &lt;a href=&#34;#translate-module&#34; &gt;Translate module&lt;/a&gt; to manage&#xA;static links.&lt;/p&gt;&#xA;&lt;p&gt;The static link (which is a pointer to the enclosing function)&#xA;is passed to a function in a register and stored into the frame,&#xA;just like any other escaping formal parameter. So we will treat&#xA;it as one by adding another &lt;code&gt;true&lt;/code&gt; value at the front the list&#xA;of booleans representing formal parameters. It means that for&#xA;some function &lt;code&gt;f(x,y)&lt;/code&gt; (assuming neigher &lt;code&gt;x&lt;/code&gt; nor &lt;code&gt;y&lt;/code&gt; escapes)&#xA;we&amp;rsquo;ll have the following list:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the extra &lt;code&gt;true&lt;/code&gt; at the beginning.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Translate module&lt;/p&gt;&#xA;&lt;p&gt;The &lt;code&gt;Translate&lt;/code&gt; module handles the notion of nested scopes (via&#xA;static links), providing the interface to the &lt;code&gt;Semant&lt;/code&gt; module.&lt;/p&gt;&#xA;&lt;p&gt;We separate &lt;code&gt;Semant&lt;/code&gt; from &lt;code&gt;Translate&lt;/code&gt; module to avoid a huge,&#xA;unweildy module that does both: type checking and semantic&#xA;translation.&lt;/p&gt;&#xA;&lt;p&gt;Ok, I think at this point we are ready to write some initial&#xA;implementation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Represents a nesting level *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Describes a way to access a formal parameter or a local variable.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    Basically, it is just a [Frame.access] plus a nesting [level] *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Outermost level at which all&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    top-level functions and variables are declared *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;outermost&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Creates a new &amp;#34;nesting level&amp;#34; for a function *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Extracts a list of accesses *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Creates an [access] at the given [level].&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    The argument [bool] specifies whether the variable escapes *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alloc_local&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We don&amp;rsquo;t know yet what the &lt;code&gt;expr&lt;/code&gt; will be, thats why it is a&#xA;type alias for &lt;code&gt;unit&lt;/code&gt;. And here is the basic implementation:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;parent&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;option&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;[@@&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;deriving&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;show&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;outermost&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mk_label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;None&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parent&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;None&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parent&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;mk&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;parent&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(* Returns formals (excluding the static link) *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#95a5a6&#34;&gt;(* exclude the SL *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;args&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;tl&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;List&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;args&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;alloc_local&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;esc&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Frame&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;alloc_local&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;frame&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;esc&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;lev&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice the &lt;code&gt;formals = true :: formals&lt;/code&gt; in the &lt;code&gt;mk&lt;/code&gt; function, it&#xA;is there to represent a static link.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Env&lt;/p&gt;&#xA;&lt;p&gt;We must keep the &lt;code&gt;Translate.level&lt;/code&gt; along with the &lt;code&gt;Temp.label&lt;/code&gt;&#xA;in the &lt;code&gt;FunEntry&lt;/code&gt;. Also we need to update the &lt;code&gt;VarEntry&lt;/code&gt; to&#xA;include the &lt;code&gt;Translate.access&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here is how our updated &lt;code&gt;Env&lt;/code&gt; module looks like:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;T&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Type&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Table&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Symbol&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;Table&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Variable entry *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;var_entry&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Translate&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;access&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Describes how to access the variable **)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;ty&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;T&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Type of the variable *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Function entry *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_entry&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Translate&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Nesting level *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Temp&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Label of the machine-code entry point *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;formals&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;T&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Types of the formal parameters *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;result&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;T&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#95a5a6&#34;&gt;(** Type of the result returned by the function **)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Term-level entry *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;entry&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;VarEntry&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;var_entry&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;FunEntry&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;fun_entry&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Contains bindings for predefined functions *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;base_venv&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;entry&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Table&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Predefined types *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;base_tenv&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;T&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Table&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Escapes&lt;/p&gt;&#xA;&lt;p&gt;To calculate which variables should be stored in registers and&#xA;which should be allocated in the frame we&amp;rsquo;ll have a special&#xA;module named &lt;code&gt;Escape&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Here its interface in OCaml:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Depth (nesting level) of the function that&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    contains the variable declaration *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;depth&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Environment that maps variables to pairs of depth and&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    a reference to a boolean flag indicating if a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    particular variable escapes *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;depth&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ref&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Symbol&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;Table&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;(** Looks for escaping variables and records this&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#95a5a6&#34;&gt;    info in the [escape] fields of the abstract syntax *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;traverse_prog&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Syntax&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;expr&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;traverse_prog&lt;/code&gt; function is going to traverse the entire AST&#xA;looking for escaping uses of every variable. Also, we&amp;rsquo;ll have a&#xA;separate environment &lt;code&gt;env&lt;/code&gt; to track &amp;ldquo;escaping&amp;rdquo; of variables.&lt;/p&gt;&#xA;&lt;p&gt;Whenever a variable or formal-parameter declaration \(a\) is&#xA;found at static function-nesting depth \(d\) then a new binding&#xA;&lt;code&gt;(d, ref false)&lt;/code&gt; is entered into the environment &lt;code&gt;env&lt;/code&gt;. This new&#xA;environment is used in processing expressions within the scope&#xA;of the variable. Then whenever this var or formal-parameter&#xA;\(a\) is used at depth \(\gt d\) (which means that it escapes),&#xA;then our &amp;ldquo;escape ref&amp;rdquo; is set to &lt;code&gt;true&lt;/code&gt; in the environment.&lt;/p&gt;&#xA;&lt;p&gt;This should take place before semantic analysis, because the&#xA;&lt;code&gt;Semant&lt;/code&gt; module needs to know about escaping variables to do&#xA;it&amp;rsquo;s work.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Semant&lt;/p&gt;&#xA;&lt;p&gt;Now lets go and update our &lt;code&gt;Semant&lt;/code&gt; module.&lt;/p&gt;&#xA;&lt;p&gt;I won&amp;rsquo;t paste the whole implementation, the code is &lt;a href=&#34;https://github.com/vyorkin/tiger/blob/master/chapter6/lib/semant.ml&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;haskell&#34;&gt;&#xA;  Haskell &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;_haskell&#34;&gt;@haskell&lt;/span&gt;&lt;span class=&#34;haskell&#34;&gt;haskell&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#haskell&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;a-week-of-liquid-haskell&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; A week of Liquid Haskell &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;_liquid_haskell&#34;&gt;@liquid-haskell&lt;/span&gt;&lt;span class=&#34;liquid_haskell&#34;&gt;liquid-haskell&lt;/span&gt;&lt;span class=&#34;refinement_types&#34;&gt;refinement-types&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#a-week-of-liquid-haskell&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;In this post I&amp;rsquo;ll share my experience of playing around with Liquid&#xA;Haskell for about a week.&lt;/p&gt;&#xA;&lt;h3 id=&#34;building-a-toy-ethereum-like-vm-in-haskell&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Building a toy Ethereum-like VM in Haskell &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;compilers&#34;&gt;compilers&lt;/span&gt;&lt;span class=&#34;ethereum&#34;&gt;ethereum&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;vm&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#building-a-toy-ethereum-like-vm-in-haskell&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h3 id=&#34;writing-a-simple-trading-bot-in-haskell&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Writing a simple trading bot in Haskell &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;trading&#34;&gt;trading&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#writing-a-simple-trading-bot-in-haskell&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Some time ago I was interested in trading blah blah.&lt;/p&gt;&#xA;&lt;h3 id=&#34;notes-on-parallel-and-concurrent-programming-in-haskell&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Notes on parallel &amp;amp; concurrent programming in Haskell&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#notes-on-parallel-and-concurrent-programming-in-haskell&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;\begin{equation}&#xA;\label{eq:1}&#xA;C = W\log_{2} (1+\mathrm{SNR})&#xA;\end{equation}&lt;/p&gt;&#xA;&lt;p&gt;See: &lt;a href=&#34;http://www.jmilne.org/not/Mamscd.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.jmilne.org/not/Mamscd.pdf&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;\(\require{AMScd}\)&lt;/p&gt;&#xA;&lt;p&gt;\begin{CD}&#xA;K(X) @&amp;gt;{ch}&amp;raquo; H(X;\mathbb Q);\\&#xA;@VVV @VVV \\&#xA;K(Y) @&amp;gt;{ch}&amp;raquo; H(Y;\mathbb Q);&#xA;\end{CD}&lt;/p&gt;&#xA;&lt;h2 id=&#34;ocaml&#34;&gt;&#xA;  OCaml &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;_ocaml&#34;&gt;@ocaml&lt;/span&gt;&lt;span class=&#34;ocaml&#34;&gt;ocaml&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ocaml&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;instrumenting-and-profiling-ocaml&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Instrumenting and profiling OCaml programs &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;benchmarking&#34;&gt;benchmarking&lt;/span&gt;&lt;span class=&#34;profiling&#34;&gt;profiling&lt;/span&gt;&lt;span class=&#34;performance&#34;&gt;performance&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#instrumenting-and-profiling-ocaml&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Profiling is rather a large topic, but basically it allows us to&#xA;learn where the program spent its time and which functions&#xA;called which other functions during its execution. We use that&#xA;information to understand which pieces of our program are slower&#xA;than we expected.&lt;/p&gt;&#xA;&lt;p&gt;Note the difference between profiling and benchmarking: we use&#xA;(micro-)benchmarking to estimate the cost of executing an&#xA;individual isolated pieces of code, but we use profiling to&#xA;understand to properties of the whole program and possibly find&#xA;the hot spots.&lt;/p&gt;&#xA;&lt;p&gt;Usually profiling is achieved by instrumenting either the&#xA;program source code or its binary executable. &lt;strong&gt;Instrumentation&lt;/strong&gt;&#xA;means adding some extra code to collect the required information&#xA;(for example, where it was called from), which may cause&#xA;significant performance changes. This is why code should only&#xA;execute if some special flag is set (like &lt;code&gt;--profile&lt;/code&gt; / &lt;code&gt;-p&lt;/code&gt;).&lt;/p&gt;&#xA;&lt;p&gt;Here are some known instrumentation types according to the&#xA;Wikipedia:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Manual&lt;/strong&gt; – performed by the programmer by adding extra code to&#xA;measure execution costs&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Automatic source level&lt;/strong&gt; – instrumentation added to the source&#xA;code by an automatic tool according to an instrumentation policy&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Interpreter instrumentation&lt;/strong&gt; – interpreter debug option can&#xA;enable the collection of performance metrics as the&#xA;interpreter encounters each target statement&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Intermediate language&lt;/strong&gt; – instrumentation added to assembly or&#xA;byte code&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Binary translation&lt;/strong&gt; – the tool adds instrumentation to a&#xA;compiled executable&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Compiler assisted&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Runtime instrumentation and injection&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;In this post we are going to take a closer look only at the&#xA;&lt;strong&gt;manual instrumentation&lt;/strong&gt; and the &lt;strong&gt;interpreter instrumentation&lt;/strong&gt;&#xA;in a context of the OCaml language and its ecosystem.&lt;/p&gt;&#xA;&lt;p&gt;Typically profiling includes the following steps:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Compiling (or just running) a program with profiling enabled&lt;/li&gt;&#xA;&lt;li&gt;Executing it to generate profile data&lt;/li&gt;&#xA;&lt;li&gt;Analyzing profile data to find bottlenecks&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;We also may want to consider the output format. Generally these&#xA;forms may be available for the analysis:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flat&lt;/strong&gt; – Shows the average call times for each function and&#xA;how much time spent executing that function. Output is in the&#xA;form of a table, rows are usually sorted by decreasing time&#xA;spent and a number of calls, then alphabetically by name. &lt;a href=&#34;https://sourceware.org/binutils/docs/gprof/Flat-Profile.html#Flat-Profile&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;&#xA;is the more detailed description with an example&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Call-graph&lt;/strong&gt; – Includes call-chains involved. Helps to find&#xA;functions that call other functions that spend unusual amounts&#xA;of time. Again, there is a good example in &lt;a href=&#34;https://sourceware.org/binutils/docs/gprof/Call-Graph.html#Call-Graph&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gprof docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Annotated source&lt;/strong&gt; – Lists the program  source code annotated&#xA;with the number of times each line of the program was executed&#xA;(see an example in &lt;a href=&#34;https://sourceware.org/binutils/docs/gprof/Annotated-Source.html#Annotated-Source&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gprof docs&lt;/a&gt;)&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Input-sensitive&lt;/strong&gt; – Additionally shows how an application’s&#xA;performance scales as a function of its input&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;tools&#34;&gt;&#xA;  Tools&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tools&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;There are several profiling tools available in OCaml ecosystem.&lt;/p&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/janestreet/core_profiler&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;core_profiler&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Library made by Jane Street that helps you profile programs and&#xA;estimate various costs. It belongs to the &lt;code&gt;Core&lt;/code&gt; ecosystem,&#xA;which is good, but looks like it&amp;rsquo;s poorly documented. Here is&#xA;the &lt;a href=&#34;https://blog.janestreet.com/what-the-interns-have-wrought-rpc_parallel-and-core_profiler/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;/a&gt; describing this library and the &lt;a href=&#34;https://ocaml.janestreet.com/ocaml-core/latest/doc/core_profiler/core_profiler.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs&lt;/a&gt; (with usage&#xA;examples).&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LexiFi/landmarks&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;landmarks&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The tool made by &lt;a href=&#34;http://www.lexifi.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LexiFi&lt;/a&gt;. Personally I haven’t tried it, but it&#xA;looks good.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;references&#34;&gt;&#xA;  References&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#references&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Statistical memory profiling:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://ocaml.org/meetings/ocaml/2016/Jourdan-statistically_profiling_memory_in_OCaml.pdf&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://ocaml.org/meetings/ocaml/2016/Jourdan-statistically_profiling_memory_in_OCaml.pdf&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wX4m8yqbuqE&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=wX4m8yqbuqE&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;summary&#34;&gt;&#xA;  Summary&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#summary&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Unfortunately this post is not finished :P&lt;/p&gt;&#xA;&lt;h3 id=&#34;benchmarking-ocaml-code&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Benchmarking OCaml code &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;benchmarking&#34;&gt;benchmarking&lt;/span&gt;&lt;span class=&#34;performance&#34;&gt;performance&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#benchmarking-ocaml-code&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The most known tool for benchmarking OCaml code is the&#xA;&lt;a href=&#34;https://github.com/janestreet/core_bench&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Core_bench&lt;/a&gt; by Jane Street. There is a &lt;a href=&#34;https://blog.janestreet.com/core_bench-micro-benchmarking-for-ocaml/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post about it&lt;/a&gt; in the Jane&#xA;Street tech blog that should help to get started, but it may be&#xA;a bit outdated.&lt;/p&gt;&#xA;&lt;p&gt;Here is the basic usage:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Core&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;open&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Core_bench&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;module&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Bench&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;Test&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;benchmarks&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Random&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Random&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;float&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;B&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Float add&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;+.&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;B&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Float mul&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;*.&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;B&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Float div&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;/.&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;y&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;cmd&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Bench&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;make_command&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;benchmarks&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;Command&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;cmd&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;about-lwt.ru-ru&#34;&gt;&#xA;  &lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Заметка о Lwt &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;lwt&#34;&gt;lwt&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#about-lwt.ru-ru&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;что-такое-lwt&#34;&gt;&#xA;  Что такое Lwt&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d1%87%d1%82%d0%be-%d1%82%d0%b0%d0%ba%d0%be%d0%b5-lwt&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ocsigen/lwt&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lwt&lt;/a&gt; это одна из наиболее популярных OCaml библиотек,&#xA;разрабатываемая сообществом. По сути это просто реализация&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Cooperative_multitasking&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;кооперативной многозадачности&lt;/a&gt; (как альтернативы &lt;a href=&#34;https://en.wikipedia.org/wiki/Preemption_%28computing%29&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;вытесняющей&#xA;многозадачности&lt;/a&gt;) в OCaml на основе &lt;a href=&#34;https://en.wikipedia.org/wiki/Futures_and_promises&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promises&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;В дальнейшем я буду использовать слова “поток” и промис как&#xA;взаимозаменямые&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h4 id=&#34;виды-многозадачностей&#34;&gt;&#xA;  Виды “многозадачностей”&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d0%b2%d0%b8%d0%b4%d1%8b-%d0%bc%d0%bd%d0%be%d0%b3%d0%be%d0%b7%d0%b0%d0%b4%d0%b0%d1%87%d0%bd%d0%be%d1%81%d1%82%d0%b5%d0%b9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;&lt;em&gt;Этот параграф можно пропустить&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Если в двух словах, то вытесняющую и кооперативную&#xA;многозадачность можно объяснить следующим образом:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Вытесняющая многозадачность&lt;/strong&gt; означает, что у нас есть некий&#xA;планировщик, принимающий решения о том, когда будет&#xA;выполняться какой поток, обычно принимая во внимание приоритет&#xA;потоков и выделяя им некие кванты времени. Этот вид&#xA;многозадачности используется в большинстве современных ОС.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Кооперативная многозадачность&lt;/strong&gt; – планировщик не принимает&#xA;решение о переключении потоков. Поток должен явно&#xA;сигнализировать о том, что он готов прерваться и предоставить&#xA;процессорное время другим потокам.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;асинхронное-программирование-с-lwt-и-промисы&#34;&gt;&#xA;  Асинхронное программирование с Lwt и промисы&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d0%b0%d1%81%d0%b8%d0%bd%d1%85%d1%80%d0%be%d0%bd%d0%bd%d0%be%d0%b5-%d0%bf%d1%80%d0%be%d0%b3%d1%80%d0%b0%d0%bc%d0%bc%d0%b8%d1%80%d0%be%d0%b2%d0%b0%d0%bd%d0%b8%d0%b5-%d1%81-lwt-%d0%b8-%d0%bf%d1%80%d0%be%d0%bc%d0%b8%d1%81%d1%8b&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;Lwt предоставляет нам тип данных &lt;code&gt;&#39;a Lwt.t&lt;/code&gt;. Можно относиться к&#xA;нему, как к “потоку”. Это обычный промис, содержащий некоторое&#xA;значение типа &lt;code&gt;&#39;a&lt;/code&gt;, которое может быть вычислено, например,&#xA;когда-то в будущем, но только один раз. В терминах OCaml это&#xA;просто &lt;code&gt;&#39;a ref&lt;/code&gt;, который будет заполнен позже. Изначально&#xA;значения в нём нет и промис находится в состоянии &lt;code&gt;Sleep&lt;/code&gt; (pending).&#xA;Когда вычисление завершено успешно, Lwt помещает результат типа&#xA;&lt;code&gt;&#39;a&lt;/code&gt; в наш промис и его состояние становится &lt;code&gt;Return&lt;/code&gt; (resolved). В&#xA;случае же неудачи его состояние изменяется на &lt;code&gt;Fail&lt;/code&gt; (rejected) и в&#xA;него помещается произошедшая ошибка.&lt;/p&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;API&lt;/p&gt;&#xA;&lt;p&gt;Вот как выглядит тип, описывающий состояния:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;state&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Return&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Fail&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;exn&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Sleep&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lwt предоставляет несколько полезных ф-ций:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Ltw&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Понятно, что эта ф-ция тривиально упаковывает уже известно&#xA;значение в промис. Соответственно, этот промис сразу находится в&#xA;состоянии &lt;code&gt;Return&lt;/code&gt; (resolved).&lt;/p&gt;&#xA;&lt;p&gt;Значения, упакованные в &lt;code&gt;Lwt.t&lt;/code&gt;, не могут быть просто извлечены&#xA;(т.к. вычисление может быть ещё не завершено). Для этого мы&#xA;должны использовать оператор &lt;code&gt;bind&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&amp;gt;&amp;gt;=):&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Такая конструкция позволяет нам делать композицию промисов в&#xA;“монадическом” стиле.&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;f &amp;gt;&amp;gt;= g&lt;/code&gt; создаст нам промис, который ждёт пока завершится&#xA;“поток” &lt;code&gt;f : &#39;a Lwt.t&lt;/code&gt;, получает результат его вычислений (некий&#xA;&lt;code&gt;x : &#39;a&lt;/code&gt;) и передаёт его в ф-цию &lt;code&gt;g : &#39;a -&amp;gt; &#39;b Ltw.t&lt;/code&gt;, которая&#xA;запускает поток &lt;code&gt;&#39;b Ltw.t&lt;/code&gt;. Если &lt;code&gt;f&lt;/code&gt; находится в состоянии&#xA;&lt;strong&gt;pending&lt;/strong&gt;, то и &lt;code&gt;f &amp;gt;&amp;gt;= g&lt;/code&gt; будет в состоянии &lt;code&gt;pending&lt;/code&gt;.&#xA;Соответственно, если &lt;code&gt;f&lt;/code&gt; завершится с ошибкой, то и &lt;code&gt;f &amp;gt;&amp;gt;= g&lt;/code&gt;&#xA;завершится с той же самой ошибкой.&lt;/p&gt;&#xA;&lt;p&gt;Несколько других полезных ф-ций:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;join&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;join&lt;/code&gt; получает список потоков и ожидает пока они все&#xA;завершатся. Если хотя бы один из них завершится с ошибкой&#xA;(перейдёт в состояние rejected), то и результирующий поток&#xA;завершится с той же ошибкой (после того, как все остальные&#xA;потоки завершат свои вычисления).&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;choose&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;choose&lt;/code&gt; ждёт пока выполнится хотя бы один поток. Если таких&#xA;оказалось несколько, то в качестве результата выбирается один из&#xA;них cлучайным образом.&lt;/p&gt;&#xA;&lt;p&gt;На самом деле их огромное множество и все их можно найти &lt;a href=&#34;http://ocsigen.org/lwt/dev/api/Lwt_list&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;тут&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;PPX&lt;/p&gt;&#xA;&lt;p&gt;У нас есть следующий синтаксический сахар:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Что эквивалентно следующему фрагменту:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;bind&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;...)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Примеры&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Следующие примеры я взял из официального туториала&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;Чтение из STDIN без Lwt, выполнение блокируется пока не&#xA;поступит пользовательский ввод:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Pervasives&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;read_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;print_endline&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Now unblocked!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;С промисами Lwt выполнение продолжается:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line_promise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt_io&lt;/span&gt;.&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;read_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;print_endline&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Execution just continues...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line_promise&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;В данном случае это не совсем то, что нам нужно, т.к. программа&#xA;сразу завершает работу так и не дождавшись пользовательского&#xA;ввода. Чтобы заблокироваться и подождать пока промис выполнится&#xA;мы можем использовать ф-цию &lt;code&gt;Lwt_main.run&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line_promise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt_io&lt;/span&gt;.&lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;read_line&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;print_endline&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;Execution just continues...&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt_main&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line_promise&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;ignore&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;line&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Lwt_main.run&lt;/code&gt; используется только 1 раз, чтобы подожать пока&#xA;завершится промис самого верхнего уровня. Когда этот промис&#xA;выполнится, программа завершает работу.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;!--list-separator--&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Ещё примеры:&lt;/p&gt;&#xA;&lt;p&gt;Опять же, я не заморачивался и взял примеры из официального&#xA;туториала, тк я слишком ленивый, чтобы придумывать их самому.&lt;/p&gt;&#xA;&lt;p&gt;Пример функции, которая печатает “tic” каждую секунду, не&#xA;блокируя другие “потоки”:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;tic&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;print_endline&lt;/span&gt; &lt;span style=&#34;color:#7f8c8d&#34;&gt;&amp;#34;tic&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt_unix&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;sleep&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#434f54&#34;&gt;tic&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Пример запуска нескольких “потоков” и ожидание их результатов.&lt;/p&gt;&#xA;&lt;p&gt;Допустим у нас есть пара ф-ций &lt;code&gt;f&lt;/code&gt; и &lt;code&gt;g&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;val&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#00979d&#34;&gt;unit&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Следующий код запустит их вычисления последовательно:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;А вот так мы можем запустить обе ф-ции конкурентно и сразу же&#xA;подождать их завершения:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;p1&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;p2&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;...&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Пример ф-ции, которая выполняет все вычисления из списка&#xA;конкрурентно:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rt&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;t&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;rt&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;v&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Следующая ф-ция наоборот, ожидает пока выполнится каждое&#xA;предыдущее вычисление из списка, прежде чем запустить следующее:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;rec&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;map_serial&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;match&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;with&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;[]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#728e00&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;-&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#728e00&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;lwt&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;map_serial&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;in&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#434f54&#34;&gt;Lwt&lt;/span&gt;.&lt;span style=&#34;color:#434f54&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#434f54&#34;&gt;v&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#728e00&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#434f54&#34;&gt;l&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#728e00&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Конечно, это только самые “вершки” Lwt.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;полезные-ссылки&#34;&gt;&#xA;  Полезные ссылки&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#%d0%bf%d0%be%d0%bb%d0%b5%d0%b7%d0%bd%d1%8b%d0%b5-%d1%81%d1%81%d1%8b%d0%bb%d0%ba%d0%b8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.cs.cornell.edu/courses/cs3110/2019sp/textbook/ads/promises.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promises &lt;/a&gt; в книге Functional Programming in OCaml&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gitter.im/ocaml-lwt/Lobby&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lwt Gitter&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Туториал &lt;a href=&#34;https://ocsigen.org/tuto/6.4/manual/lwt&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lwt in 5 minutes&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ocsigen.org/lwt/4.4.0/manual/manual&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lwt мануал&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.baturin.org/code/lwt-counter-server/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Туториал&lt;/a&gt; про то, как сделать простой сервер на сокетах, позволяющий&#xA;клиентам подключаться, увеличивать счётчик и читать его&#xA;значение.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;emacs&#34;&gt;&#xA;  Emacs &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;_emacs&#34;&gt;@emacs&lt;/span&gt;&lt;span class=&#34;emacs&#34;&gt;emacs&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#emacs&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;my-first-emacs-package-ormolu&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; My first Emacs package: ormolu.el &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;ormolu&#34;&gt;ormolu&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#my-first-emacs-package-ormolu&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;I&amp;rsquo;ve been using Emacs on a daily basis for about 2 years already,&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tweag/ormolu&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ormolu&lt;/a&gt; is an opinionated zero-configuration formatter for&#xA;Haskell source code built in &lt;a href=&#34;http://tweag.io&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tweag&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;h3 id=&#34;emacs-tiger-mode&#34;&gt;&#xA;  &lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Writing an Emacs major mode for the Tiger language&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#emacs-tiger-mode&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;references&#34;&gt;&#xA;  References&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#references&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;There is a really good tutorial by Xah Lee: &lt;a href=&#34;http://ergoemacs.org/emacs/elisp_write_major_mode_index.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Emacs Lisp How to&#xA;Write Major Mode&lt;/a&gt;, which I highly recommend reading.&lt;/p&gt;&#xA;&lt;h2 id=&#34;formal-methods&#34;&gt;&#xA;  Formal Methods&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#formal-methods&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;theorem-provers&#34;&gt;&#xA;  Theorem Provers&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#theorem-provers&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;:@theorem_provers:theorem_provers:&lt;/p&gt;&#xA;&lt;h4 id=&#34;designing-a-theorem-prover-part-1&#34;&gt;&#xA;  Designing a Theorem Prover, Part 1 &lt;span class=&#34;tag&#34;&gt;&lt;span class=&#34;folderol&#34;&gt;folderol&lt;/span&gt;&lt;/span&gt;&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#designing-a-theorem-prover-part-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;div class=&#34;ox-hugo-toc toc&#34;&gt;&#xA;&lt;div class=&#34;heading&#34;&gt;Table of Contents&lt;/div&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger&#34; &gt;Making of Tiger&lt;/a&gt;:@compilers:compilers&amp;#x1f42f;ocaml:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-1-intro&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #1, Intro&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-2-lexical-analysis&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #2, Lexical Analysis&lt;/a&gt;:lexing:ocamllex:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-3-parsing&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #3, Parsing&lt;/a&gt;:parsing:menhir:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-4-abstact-syntax&#34; &gt;&lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Making of Tiger #4, Abstract Syntax&lt;/a&gt;:ast:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-5-semantic-analysis&#34; &gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Making of Tiger #5, Semantic Analysis&lt;/a&gt;:type_checking:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#making-of-tiger-6-stack-frames&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Making of Tiger #6, Stack frames&lt;/a&gt;:stack:memory:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#haskell&#34; &gt;Haskell&lt;/a&gt;:@haskell:haskell:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#a-week-of-liquid-haskell&#34; &gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; A week of Liquid Haskell&lt;/a&gt;:@liquid_haskell:liquid_haskell:refinement_types:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#building-a-toy-ethereum-like-vm-in-haskell&#34; &gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Building a toy Ethereum-like VM in Haskell&lt;/a&gt;:compilers:ethereum:vm:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#writing-a-simple-trading-bot-in-haskell&#34; &gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Writing a simple trading bot in Haskell&lt;/a&gt;:trading:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#notes-on-parallel-and-concurrent-programming-in-haskell&#34; &gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Notes on parallel &amp;amp; concurrent programming in Haskell&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ocaml&#34; &gt;OCaml&lt;/a&gt;:@ocaml:ocaml:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#instrumenting-and-profiling-ocaml&#34; &gt;&lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Instrumenting and profiling OCaml programs&lt;/a&gt;:benchmarking:profiling:performance:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#benchmarking-ocaml-code&#34; &gt;&lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Benchmarking OCaml code&lt;/a&gt;:benchmarking:performance:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#about-lwt.ru-ru&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Заметка о Lwt&lt;/a&gt;:lwt:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#emacs&#34; &gt;Emacs&lt;/a&gt;:@emacs:emacs:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#my-first-emacs-package-ormolu&#34; &gt;&lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; My first Emacs package: ormolu.el&lt;/a&gt;:ormolu:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#emacs-tiger-mode&#34; &gt;&lt;span class=&#34;org-todo todo DRAFT&#34;&gt;DRAFT&lt;/span&gt; Writing an Emacs major mode for the Tiger language&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#formal-methods&#34; &gt;Formal Methods&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#theorem-provers&#34; &gt;Theorem Provers&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#coq&#34; &gt;Coq&lt;/a&gt;:@coq:coq:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#notes-on-coq-and-ssreflect&#34; &gt;Notes on Coq and Ssreflect&lt;/a&gt;:ssreflect:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#proving-tapl-in-coq&#34; &gt;Proving TAPL in Coq&lt;/a&gt;:tapl:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#notes-on-types-in-coq.ru-ru&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Заметки про типы в Coq (WIP)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#rust&#34; &gt;Rust&lt;/a&gt;:@rust:rust:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#exploring-async-basics.ru-ru&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Зелёные потоки в 200 строчек на Rust. Часть 1&lt;/a&gt;:@arm64:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#assembly&#34; &gt;Assembly&lt;/a&gt;:@assembly:assembly:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#arm64-assembly-1.ru-ru&#34; &gt;&lt;span class=&#34;org-todo done DONE&#34;&gt;DONE&lt;/span&gt; Программирование для ARM64. Часть 1&lt;/a&gt;:@arm64:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#blockchain&#34; &gt;Blockchain&lt;/a&gt;:@blockchain:blockchain:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#who-to-follow&#34; &gt;Who to follow&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#hahacks&#34; &gt;Hahacks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#evm&#34; &gt;EVM&lt;/a&gt;:@evm:@solidity:evm:solidity:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ethereum-security-audit&#34; &gt;Ethereum Security Audit&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#my-path-to-blockchain-security-audit&#34; &gt;My path to blockchain security audit&lt;/a&gt;:security:&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;#ctf-walkthrough&#34; &gt;CTF walkthrough&lt;/a&gt;:@ctf:ctf:security:&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;!--endtoc--&gt;&#xA;&lt;p&gt;This is a summary.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
