<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on transcendental kyberautism</title>
    <link>https://vyorkin.org/posts/</link>
    <description>Recent content in Posts on transcendental kyberautism</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sat, 11 Jan 2025 16:50:00 +0700</lastBuildDate>
    <atom:link href="https://vyorkin.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Designing a Theorem Prover, Part 9</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-9/</link>
      <pubDate>Sat, 11 Jan 2025 16:50:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-9/</guid>
      <description>&lt;h2 id=&#34;quantifier-unification&#34;&gt;&#xA;  Quantifier Unification&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#quantifier-unification&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;For now our little theorem prover can unify only atomic formulas (predicates). When we encounter quantifiers everything gets more interesting. Let&amp;rsquo;s look at a specific example that Paulson discusses in his paper.&lt;/p&gt;&#xA;&lt;p&gt;Why can&amp;rsquo;t we unify \(\exists x.P(x)\) with \(\exists x.P(?a)\) by simply setting&#xA;\(?a\) to \(x\)? &lt;br /&gt;&#xA;It seems intuitive at first glance, but it&amp;rsquo;s a trap.&lt;/p&gt;&#xA;&lt;p&gt;Think about what these two formulas actually mean:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 8</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-8/</link>
      <pubDate>Wed, 08 Jan 2025 16:44:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-8/</guid>
      <description>&lt;p&gt;As our codebase grows, maintaining clarity and organization becomes more important. It’s time to move beyond inline tests and switch to Alcotest.&lt;/p&gt;&#xA;&lt;h2 id=&#34;alcotest&#34;&gt;&#xA;  Alcotest&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#alcotest&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;To use Alcotest, you need to provide a &lt;code&gt;pp&lt;/code&gt; function for pretty-printing and an &lt;code&gt;equals&lt;/code&gt; function for equality checks. The &lt;code&gt;testable&lt;/code&gt; function in Alcotest handles wrapping your type for testing, requiring only these two functions.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;(* unification.mli *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;module&lt;/span&gt; Env : &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sig&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(* ... *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;val&lt;/span&gt; pp : Format.formatter -&amp;gt; t -&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;unit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(** Prints the env [t] using the format output function [fmt].&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      @param fmt The formatter to which the formatted env is output.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      @param t The env to be formatted. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;val&lt;/span&gt; equal : t -&amp;gt; t -&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(** Returns [true] if two environments are equal. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To implement pretty-printing we&amp;rsquo;ll use the &lt;code&gt;Format&lt;/code&gt; module.&#xA;Equality is just an alias for &lt;code&gt;Map.equal Term.equal&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 7</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-7/</link>
      <pubDate>Thu, 26 Dec 2024 18:03:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-7/</guid>
      <description>&lt;h2 id=&#34;environment&#34;&gt;&#xA;  Environment&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#environment&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Our unification algorithm maintains the environment which is&#xA;defined like this: &lt;br /&gt;&#xA;\(\{(?a_1, t_1), \dots, (?a_k, t_k) \}\), where \(\forall i: a_i \neq t_i\)&lt;/p&gt;&#xA;&lt;p&gt;We will evaluate each term in this env and replace meta-variable \(?a_i\) with \(t_i\) when necessary. When we encounter an \(?a_i\) we will do the replacement and work with \(t_i\) recursively. This process will eventually stop, as the occurs check prevents loops such as \({(?b, f (?a)), (?a, g(?b))}\).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 6</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-6/</link>
      <pubDate>Sat, 14 Dec 2024 22:25:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-6/</guid>
      <description>&lt;h2 id=&#34;unifier&#34;&gt;&#xA;  Unifier&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#unifier&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;As we saw in &lt;a href=&#34;https://vyorkin.org/posts/designing-a-theorem-prover-part-3/#unification&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 3&lt;/a&gt;, unification is the process of finding substitutions for variables in two terms \(t\) and \(u\) to make equation \(t = u\) true.&lt;/p&gt;&#xA;&lt;p&gt;The key assumptions:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Distinctness&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;All functions and constants in the terms are distinct (unless explicitly stated otherwise).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Equality rules&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;The only valid equalities are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reflexivity (\(t = t\)): Any term is always equal to itself.&lt;/li&gt;&#xA;&lt;li&gt;Substitution of equals for equals: if two terms \(a\) and \(b\) are equal (\(a = b\)), then one can replace the other.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Basically we need to solve a set of equations \(\{t_1 = u_1, \dots, t_n&#xA;= u_n\}\). &lt;br /&gt;&#xA;Each term can be a function application, a parameter, or a meta-variable:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 5</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-5/</link>
      <pubDate>Tue, 10 Dec 2024 19:27:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-5/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t really enjoy writing parsers. Moreover, parsers and pretty-printing are not exactly related to working through Paulson&amp;rsquo;s paper, but one way or another, I&amp;rsquo;ll have to do it to get a working version of the theorem prover. So let&amp;rsquo;s get started, the time has come.&lt;/p&gt;&#xA;&lt;h2 id=&#34;refactoring&#34;&gt;&#xA;  Refactoring&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#refactoring&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Before working on lexing, parsing and pretty-printing, let&amp;rsquo;s refactor our code to introduce more explicit types for logical connectives and quantifiers. We&amp;rsquo;ll start by defining simple sum-types for &lt;code&gt;connective&lt;/code&gt; and &lt;code&gt;quantifier&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 4</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-4/</link>
      <pubDate>Sat, 30 Nov 2024 20:36:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-4/</guid>
      <description>&lt;h2 id=&#34;terms&#34;&gt;&#xA;  Terms&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#terms&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;One of the first design steps is choosing how to represent&#xA;&lt;strong&gt;&lt;strong&gt;terms&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;formulas&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;We have 3 kinds of variables – &lt;strong&gt;&lt;strong&gt;meta-variables&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;parameters&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;bound variables&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Meta-variables&lt;/strong&gt;&lt;/strong&gt;, which we’ll now simply call “variables,” are represented by names like \(x\), \(y\). &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/strong&gt; have a name and a list of variables that represent quantifier rule provisos. &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;For &lt;strong&gt;&lt;strong&gt;bound variables&lt;/strong&gt;&lt;/strong&gt; we&amp;rsquo;ll use &lt;strong&gt;&lt;strong&gt;De Bruijn indexes&lt;/strong&gt;&lt;/strong&gt; that&#xA;eliminate all bound variable names. This makes formulas like \(\forall x. \forall y. P(x)\) and \(\forall y. \forall x. P(y)\) equivalent.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question no-quote&#34;&gt;&lt;p&gt;&lt;strong&gt;What Are De Bruijn Indexes?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 3</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-3/</link>
      <pubDate>Sun, 29 Sep 2024 20:19:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-3/</guid>
      <description>&lt;h2 id=&#34;quantifiers-and-unification&#34;&gt;&#xA;  Quantifiers and Unification&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#quantifiers-and-unification&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post, we’ll dive into the mechanics of quantifiers and&#xA;unification in theorem proving.&lt;/p&gt;&#xA;&lt;h2 id=&#34;meta-variables&#34;&gt;&#xA;  Meta-Variables&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#meta-variables&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In the backward rules \(\forall L\) and \(\exists R\), the term \(t\) is left&#xA;unspecified, meaning it can represent any expression. We will&#xA;use special &lt;strong&gt;&lt;strong&gt;meta-variables&lt;/strong&gt;&lt;/strong&gt; like \(?a\), \(?b\), \(?c\), etc.,&#xA;which act as placeholders for such terms. The backward rules&#xA;will insert a fresh meta-variable, such as \(?b\), in place of \(t\)&#xA;(term) in the subgoal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forwards versus Backwards Reasoning</title>
      <link>https://vyorkin.org/posts/forwards-reasoning-vs-backwards-reasoning/</link>
      <pubDate>Sat, 21 Sep 2024 19:07:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/forwards-reasoning-vs-backwards-reasoning/</guid>
      <description>&lt;h2 id=&#34;forwards-reasoning&#34;&gt;&#xA;  Forwards Reasoning&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#forwards-reasoning&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We &lt;strong&gt;start with axioms&lt;/strong&gt;, and step by step build up a proof until we reach the desired conclusion.&lt;/p&gt;&#xA;&lt;p&gt;Example in Gentzen&amp;rsquo;s LK:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We start with a single axiom: \(A \vdash A\). &lt;br /&gt;&#xA;It means: any formula implies itself, so this sequent is always &lt;strong&gt;true&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;We apply the &lt;strong&gt;left introduction for conjunction&lt;/strong&gt; rule:&#xA;\(\displaystyle \cfrac{\Gamma, A \vdash \Delta}{\Gamma, A \land B \vdash \Delta} \quad&#xA;(\land L_1)\) &lt;br /&gt;&#xA;We get: \(\displaystyle A \land B \vdash A\)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We started from axioms or known facts and builded towards the conclusion.&#xA;We applied \(\land L_1\) directly on the axiom.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 2</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-2/</link>
      <pubDate>Mon, 09 Sep 2024 11:30:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-2/</guid>
      <description>&lt;style&gt;&#xA;.colorscheme-dark .sane-table th,&#xA;.colorscheme-dark .sane-table td,&#xA;.sane-table th,&#xA;.sane-table td {&#xA;  border: 0;&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;h2 id=&#34;propositional-logic&#34;&gt;&#xA;  Propositional Logic&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#propositional-logic&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this short post we will explore how different proof&#xA;strategies, particularly in backwards reasoning, can impact the&#xA;efficiency of deriving conclusions. At the end, I&amp;rsquo;ll include a&#xA;table of Paulson&amp;rsquo;s rules for the folderol theorem prover.&lt;/p&gt;&#xA;&lt;p&gt;Propositional logic works with the connectives \(\land\), \(\lor\), \(\to\), \(\leftrightarrow\), and \(\neg\). &lt;br /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 1</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-1/</link>
      <pubDate>Sun, 08 Sep 2024 01:02:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-1/</guid>
      <description>&lt;style&gt;&#xA;.sane-table table {&#xA;  font-size: 1.6rem;&#xA;  border-collapse: collapse;&#xA;  width: 100%;&#xA;}&#xA;&#xA;.colorscheme-dark .sane-table th,&#xA;.colorscheme-dark .sane-table td,&#xA;.sane-table th,&#xA;.sane-table td {&#xA;  text-align: center !important;&#xA;  padding: 1.6rem 0.4rem;&#xA;  border: 0;&#xA;}&#xA;&#xA;.sane-table td {&#xA;  min-width: 280px;&#xA;}&#xA;&#xA;.sane-table td:last-child {&#xA;  width: 280px;&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this series, I’ll be working through the&#xA;&lt;a href=&#34;https://arxiv.org/pdf/cs/9301110&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;folderol&lt;/a&gt; (1990) by &lt;a href=&#34;https://en.wikipedia.org/wiki/Lawrence_Paulson&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lawrence&#xA;C Paulson&lt;/a&gt; and&#xA;trying to use its insights to design a theorem prover in OCaml. He calls&#xA;the prover &lt;strong&gt;folderol&lt;/strong&gt; and I will do the same. His prover follows&#xA;automatic strategy but interactive and prints trace of its rules&#xA;as evidence.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #8 Puppet</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-8-puppet/</link>
      <pubDate>Tue, 15 Nov 2022 12:30:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-8-puppet/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;&lt;p&gt;There&amp;rsquo;s a huge lending pool borrowing Damn Valuable Tokens&#xA;(DVTs), where you first need to deposit twice the borrow amount&#xA;in ETH as collateral. The pool currently has 100000 DVTs in&#xA;liquidity.&lt;/p&gt;&#xA;&lt;p&gt;There&amp;rsquo;s a DVT market opened in an&#xA;&lt;a href=&#34;https://docs.uniswap.org/protocol/V1/introduction&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;description&#xA;Uniswap v1 exchange&lt;/a&gt;, currently with 10 ETH and 10 DVT in&#xA;liquidity.&lt;/p&gt;&#xA;&lt;p&gt;Starting with 25 ETH and 1000 DVTs in balance, you must steal&#xA;all tokens from the lending pool.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #6 Selfie</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-6-selfie/</link>
      <pubDate>Wed, 02 Nov 2022 08:12:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-6-selfie/</guid>
      <description>&lt;p&gt;After a short break, I&amp;rsquo;m back and excited to keep going with&#xA;these CTF walkthrough series.&lt;/p&gt;&#xA;&lt;p&gt;The current challenge is &lt;a href=&#34;https://www.damnvulnerabledefi.xyz/challenges/6.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Selfie&lt;/a&gt;:&lt;/p&gt;&#xA;&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;A new cool lending pool has launched! It&amp;rsquo;s now offering flash&#xA;loans of DVT tokens. Wow, and it even includes a really fancy&#xA;governance mechanism to control it. What could go wrong, right?&#xA;You start with no DVT tokens in balance, and the pool has 1.5&#xA;million. Your objective: take them all.&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Looks like we might be able to abuse the governance using a&#xA;flash loan to drain all the funds. We&amp;rsquo;ll see ;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #5 The rewarder</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-5-the-rewarder/</link>
      <pubDate>Wed, 17 Aug 2022 00:33:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-5-the-rewarder/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Today we&amp;rsquo;re going to take a look at &lt;a href=&#34;https://www.damnvulnerabledefi.xyz/challenges/5.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Rewarder&lt;/a&gt; challenge:&lt;/p&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;There&amp;rsquo;s a pool offering rewards in tokens every 5 days for those&#xA;who deposit their DVT tokens into it. Alice, Bob, Charlie and&#xA;David have already deposited some DVT tokens, and have won their&#xA;rewards! You don&amp;rsquo;t have any DVT tokens. But in the upcoming&#xA;round, you must claim most rewards for yourself. Oh, by the way,&#xA;rumours say a new pool has just landed on mainnet. Isn&amp;rsquo;t it&#xA;offering DVT tokens in flash loans?&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s explore the smart contracts! For this challenge we have 5 of them:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #4 Side entrance</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-4-side-entrance/</link>
      <pubDate>Thu, 11 Aug 2022 16:56:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-4-side-entrance/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;A surprisingly simple lending pool allows anyone to deposit ETH,&#xA;and withdraw it at any point in time. This very simple lending&#xA;pool has 1000 ETH in balance already, and is offering free flash&#xA;loans using the deposited ETH to promote their system. You must&#xA;take all ETH from the lending pool.&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Here is the lending pool contract:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;12&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; {Address} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;openzeppelin-contracts/utils/Address.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;interface&lt;/span&gt; IFlashLoanEtherReceiver {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; execute() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; * @title SideEntranceLenderPool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; SideEntranceLenderPool {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;using&lt;/span&gt; Address &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;mapping&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; balances;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error NotEnoughETHInPool();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error FlashLoanHasNotBeenPaidBack();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; deposit() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; withdraw() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; amountToWithdraw = balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;).sendValue(amountToWithdraw);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; flashLoan(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; amount) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; balanceBefore = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (balanceBefore &amp;lt; amount) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;revert&lt;/span&gt; NotEnoughETHInPool();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        IFlashLoanEtherReceiver(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;).execute{&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;: amount}();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt; &amp;lt; balanceBefore)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;revert&lt;/span&gt; FlashLoanHasNotBeenPaidBack();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Side entrance lender pool&amp;hellip;🤔 Sounds like a &amp;ldquo;lender pool with a&#xA;back door&amp;rdquo; 😂&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #3 Truster</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-3-truster/</link>
      <pubDate>Wed, 10 Aug 2022 11:37:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-3-truster/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;&lt;p&gt;More and more lending pools are offering flash loans. In this&#xA;case, a new pool has launched that is offering flash loans of&#xA;DVT tokens for free.&lt;/p&gt;&#xA;&lt;p&gt;Currently the pool has 1 million DVT tokens in balance. And you&#xA;have nothing.&lt;/p&gt;&#xA;&lt;p&gt;But don&amp;rsquo;t worry, you might be able to take them all from the&#xA;pool. In a single transaction.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;12&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; {IERC20} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;openzeppelin-contracts/token/ERC20/IERC20.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; {Address} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;openzeppelin-contracts/utils/Address.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; {ReentrancyGuard} &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;openzeppelin-contracts/security/ReentrancyGuard.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; * @title TrusterLenderPool&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; * @author Damn Vulnerable DeFi (https://damnvulnerabledefi.xyz)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; TrusterLenderPool &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;is&lt;/span&gt; ReentrancyGuard {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;using&lt;/span&gt; Address &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    IERC20 &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;immutable&lt;/span&gt; damnValuableToken;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error NotEnoughTokensInPool();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error FlashLoanHasNotBeenPaidBack();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; tokenAddress) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        damnValuableToken = IERC20(tokenAddress);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; flashLoan(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; borrowAmount,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; borrower,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; target,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes&lt;/span&gt; calldata &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; nonReentrant {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; balanceBefore = damnValuableToken.balanceOf(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (balanceBefore &amp;lt; borrowAmount) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;revert&lt;/span&gt; NotEnoughTokensInPool();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        damnValuableToken.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transfer&lt;/span&gt;(borrower, borrowAmount);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        target.functionCall(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; balanceAfter = damnValuableToken.balanceOf(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (balanceAfter &amp;lt; balanceBefore) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;revert&lt;/span&gt; FlashLoanHasNotBeenPaidBack();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The contract keeps a reference to the DVT ERC20 token, which is&#xA;set in the constructor:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #2 Naive Receiver</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-2-naive-receiver/</link>
      <pubDate>Tue, 09 Aug 2022 20:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-2-naive-receiver/</guid>
      <description>&lt;h2 id=&#34;challenge&#34;&gt;&#xA;  Challenge&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#challenge&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question&#34;&gt;&lt;p&gt;There&amp;rsquo;s a lending pool offering quite expensive flash loans of&#xA;Ether, which has 1000 ETH in balance.&lt;/p&gt;&#xA;&lt;p&gt;You also see that a user has deployed a contract with 10 ETH in&#xA;balance, capable of interacting with the lending pool and&#xA;receiving flash loans of ETH.&lt;/p&gt;&#xA;&lt;p&gt;Drain all ETH funds from the user&amp;rsquo;s contract. Doing it in a&#xA;single transaction is a big plus ;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Damn Vulnerable DeFi, #1 Unstoppable</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-1-unstoppable/</link>
      <pubDate>Tue, 09 Aug 2022 20:03:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-damn-vulnerable-defi-1-unstoppable/</guid>
      <description>&lt;blockquote class=&#34;quote2 quote2-note no-quote&#34;&gt;There are only a few days left to prepare for the&#xA;&lt;a href=&#34;https://ctf.paradigm.xyz/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paradigm CTF 2022&lt;/a&gt;. Hence I&amp;rsquo;m&#xA;going to spend this time solving the&#xA;&lt;a href=&#34;https://www.damnvulnerabledefi.xyz/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Damn Vulnerable DeFi&lt;/a&gt;&#xA;challenges and then concentrate on playing the&#xA;&lt;a href=&#34;https://github.com/paradigmxyz/paradigm-ctf-2021&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paradigm CTF&#xA;2021&lt;/a&gt;.&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.damnvulnerabledefi.xyz/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Damn Vulnerable DeFi&lt;/a&gt; is&#xA;a CTF that simulates DeFi vulnerabilities created by&#xA;&lt;a href=&#34;https://twitter.com/tinchoabbate&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@tinchoabbate&lt;/a&gt;. This game&#xA;has 13 different levels featuring popular DeFi primitives such&#xA;as lash loans, price oracles, governance, lending pools,&#xA;integrations with Uniswap v2, Gnosis Safe wallets, timelocks,&#xA;NFTs, upgradeability patterns and more. It is fun and enojoyable&#xA;way to learn DeFi-related offensive security. Needless to say it&#xA;requires some level of understanding of high level concepts&#xA;behind those DeFi protocols.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #14 Gatekeeper One</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-14-gatekeeper-one/</link>
      <pubDate>Thu, 04 Aug 2022 12:24:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-14-gatekeeper-one/</guid>
      <description>&lt;p&gt;To solve this challenge we must register as an entrant.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;forge-std/console2.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; GatekeeperOne {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; entrant;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;modifier&lt;/span&gt; gateOne() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt; != &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;origin&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;_&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;modifier&lt;/span&gt; gateTwo() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;gasleft&lt;/span&gt;() % &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8191&lt;/span&gt; == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;_&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;modifier&lt;/span&gt; gateThree(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes8&lt;/span&gt; _gateKey) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint32&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint64&lt;/span&gt;(_gateKey)) == &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint16&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint64&lt;/span&gt;(_gateKey)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GatekeeperOne: invalid gateThree part one&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint32&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint64&lt;/span&gt;(_gateKey)) != &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint64&lt;/span&gt;(_gateKey),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GatekeeperOne: invalid gateThree part two&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint32&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint64&lt;/span&gt;(_gateKey)) == &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint16&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint160&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;origin&lt;/span&gt;)),&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;GatekeeperOne: invalid gateThree part three&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        );&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;_&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; enter(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes8&lt;/span&gt; _gateKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gateOne&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gateTwo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        gateThree(_gateKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;        entrant = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;origin&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#191919&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis-and-exploit&#34;&gt;&#xA;  Analysis &amp;amp; Exploit&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis-and-exploit&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; enter(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes8&lt;/span&gt; _gateKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gateOne&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gateTwo&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gateThree(_gateKey)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    entrant = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;origin&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;enter&lt;/code&gt; function has 3 modifiers that perform some checks.&#xA;The first two modifiers don&amp;rsquo;t take any parameters and the last&#xA;one expects the &lt;code&gt;bytes8 _gateKey&lt;/code&gt;. On success, it assigns&#xA;&lt;code&gt;tx.origin&lt;/code&gt; to &lt;code&gt;entrant&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #13 Privacy</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-13-privacy/</link>
      <pubDate>Thu, 04 Aug 2022 11:27:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-13-privacy/</guid>
      <description>&lt;p&gt;&lt;em&gt;The creator of this contract was careful enough to protect the sensitive areas of its storage. Unlock this contract to beat the level.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Privacy {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; locked = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; ID = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint8&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; flattening = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;10&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint8&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; denomination = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;255&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint16&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; awkwardness = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint16&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;timestamp&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes32&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes32&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;memory&lt;/span&gt; _data) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt; = _data;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; unlock(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes16&lt;/span&gt; _key) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(_key == &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes16&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt;[&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;]));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        locked = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;    A bunch of super advanced solidity algorithms...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      *&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      .,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      *.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^         ,---/V\&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      `*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.    ~|__(o.o)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      ^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;^`*.,*&amp;#39;  UU  UU&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;  */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s review the &lt;code&gt;unlock&lt;/code&gt; function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #12 Elevator</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-12-elevator/</link>
      <pubDate>Wed, 03 Aug 2022 19:58:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-12-elevator/</guid>
      <description>&lt;p&gt;To solve this challenge we have to set the &lt;code&gt;top&lt;/code&gt; state variable&#xA;to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;interface&lt;/span&gt; Building {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; isLastFloor(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Elevator {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; top;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; floor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; goTo(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; _floor) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Building building = Building(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (!building.isLastFloor(_floor)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            floor = _floor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            top = building.isLastFloor(floor);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s go over the &lt;code&gt;goTo&lt;/code&gt; function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #11 Re-entrancy</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-11-re-entrancy/</link>
      <pubDate>Tue, 02 Aug 2022 11:57:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-11-re-entrancy/</guid>
      <description>&lt;p&gt;The objective of this challenge is to steal all the funds from&#xA;the contract.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Reentrance {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;mapping&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; balances;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; donate(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _to) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[_to] += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; balanceOf(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _who) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; balances[_who];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; withdraw(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; _amount) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] &amp;gt;= _amount) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; result, ) = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;call&lt;/span&gt;{&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;: _amount}(&lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (result) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                _amount;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;unchecked&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] -= _amount;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    receive() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Originally this level had the &lt;code&gt;pragma solidity ^0.6.0&lt;/code&gt; and used the&#xA;&lt;a href=&#34;https://docs.openzeppelin.com/contracts/4.x/api/utils#SafeMath&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SafeMath&lt;/a&gt;&#xA;from OpenZeppelin, which provides wrappers over Solidity’s&#xA;arithmetic operations. We use a is a slightly modified version&#xA;of it that:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #10 King</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-10-king/</link>
      <pubDate>Mon, 01 Aug 2022 15:56:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-10-king/</guid>
      <description>&lt;p&gt;The goal of this level is to break the game defined by the&#xA;&lt;code&gt;King&lt;/code&gt; contract.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; King {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; king;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; prize;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        king = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prize = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    receive() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt;= prize || &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt; == owner);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        king.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transfer&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        king = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        prize = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; _king() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; king;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is how the game checks if we passed:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #9 Vault</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-9-vault/</link>
      <pubDate>Sat, 30 Jul 2022 19:01:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-9-vault/</guid>
      <description>&lt;p&gt;We need to unlock the &lt;code&gt;Vault&lt;/code&gt; smart contract to pass the level.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Vault {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; locked;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes32&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;private&lt;/span&gt; password;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes32&lt;/span&gt; _password) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        locked = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        password = _password;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; unlock(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bytes32&lt;/span&gt; _password) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (password == _password) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            locked = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s look at the state variables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #8 Force</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-8-force/</link>
      <pubDate>Fri, 29 Jul 2022 16:29:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-8-force/</guid>
      <description>&lt;p&gt;To complete this challenge we need to make the balance of the&#xA;&lt;code&gt;Force&lt;/code&gt; contract greater than zero.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Force {&lt;span style=&#34;color:#007f7f&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;                   MEOW ?&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;         /\_/\   /&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;    ____/ o o \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;  /~____  =ø= /&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt; (______)__m_m)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;*/&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;thoughts&#34;&gt;&#xA;  Thoughts&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#thoughts&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The contract has nothing in it, except the ASCII-art of a cat.&#xA;It doesn&amp;rsquo;t have a&#xA;&lt;a href=&#34;https://docs.soliditylang.org/en/v0.8.10/contracts.html#receive-ether-function&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;receive&lt;/a&gt;,&#xA;&lt;a href=&#34;https://docs.soliditylang.org/en/v0.8.10/contracts.html#fallback-function&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fallback&lt;/a&gt;&#xA;function, or any other&#xA;&lt;a href=&#34;https://solidity-by-example.org/payable/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;payable&lt;/a&gt; function:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #7 Delegation</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-7-delegation/</link>
      <pubDate>Fri, 29 Jul 2022 13:18:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-7-delegation/</guid>
      <description>&lt;p&gt;The goals is to claim the ownership of the &lt;code&gt;Delegate&lt;/code&gt; contract.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Delegate {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _owner) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = _owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; pwn() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Delegation {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Delegate delegate;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _delegateAddress) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        delegate = Delegate(_delegateAddress);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fallback() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; result, ) = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(delegate).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;delegatecall&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;data&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (result) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We have two contracts: the &lt;code&gt;Delegate&lt;/code&gt; and the &lt;code&gt;Delegation&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #6 Token</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-6-token/</link>
      <pubDate>Thu, 28 Jul 2022 11:10:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-6-token/</guid>
      <description>&lt;p&gt;We start with the 20 tokens. To complete this challenge we need&#xA;to get some more.&lt;/p&gt;&#xA;&lt;p&gt;Here is the original &lt;code&gt;Token&lt;/code&gt; contract:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;6&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Token {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;mapping&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) balances;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; totalSupply;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; _initialSupply) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] = totalSupply = _initialSupply;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; transfer(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _to, &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; _value) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] - _value &amp;gt;= &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] -= _value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        balances[_to] += _value;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; balanceOf(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _owner) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; balances[_owner];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s go line by line and see what we can come up with.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #5 Telephone</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-5-telephone/</link>
      <pubDate>Tue, 26 Jul 2022 15:47:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-5-telephone/</guid>
      <description>&lt;p&gt;We need to claim ownership of the contract below to complete&#xA;this level:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Telephone {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; changeOwner(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; _owner) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;tx&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;origin&lt;/span&gt; != &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            owner = _owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;changeOwner&lt;/code&gt; function requires that &lt;code&gt;tx.origin != msg.sender&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;We know that &lt;code&gt;tx.origin&lt;/code&gt; always refers to the EOA (externally&#xA;owned account) that started the transaction irrespective of the&#xA;stack of contracts invoked:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #4 Coin Flip</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-4-coin-flip/</link>
      <pubDate>Tue, 26 Jul 2022 10:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-4-coin-flip/</guid>
      <description>&lt;p&gt;To complete this challenge we need to predict the outcome of a&#xA;coin flip game 10 times in a row. Here is the slightly altered&#xA;version of the original smart contract:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; CoinFlip {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; consecutiveWins;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; lastHash;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; FACTOR =&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;57896044618658097711785492504343953926634992332820282019728792003956564819968&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        consecutiveWins = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; flip(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; _guess) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; blockValue = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;blockhash&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;block&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;number&lt;/span&gt; - &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (lastHash == blockValue) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;revert&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lastHash = blockValue;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt; coinFlip = blockValue / FACTOR;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt; side = coinFlip == &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; ? &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt; : &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (side == _guess) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            consecutiveWins++;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;true&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            consecutiveWins = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;false&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;analysis&#34;&gt;&#xA;  Analysis&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#analysis&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;code&gt;CoinFlip&lt;/code&gt; contract has 3 state variables:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #3 Fallout</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-3-fallout/</link>
      <pubDate>Mon, 25 Jul 2022 15:53:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-3-fallout/</guid>
      <description>&lt;p&gt;To complete this level we need to become owner of the contract&#xA;below (slightly modified to be compatible with Solidity &lt;code&gt;^0.8.2&lt;/code&gt;):&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;openzeppelin/utils/math/SafeMath.sol&amp;#34;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Fallout {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;using&lt;/span&gt; SafeMath &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;mapping&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) allocations;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#007f7f&#34;&gt;/* constructor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; Fal1out() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        allocations[owner] = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;modifier&lt;/span&gt; onlyOwner() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt; == owner, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;caller is not the owner&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;_&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; allocate() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        allocations[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] = allocations[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;].add(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; sendAllocation(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; allocator) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(allocations[allocator] &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        allocator.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transfer&lt;/span&gt;(allocations[allocator]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; collectAllocations() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; onlyOwner {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transfer&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; allocatorBalance(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; allocator) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; allocations[allocator];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll skip the &lt;code&gt;FalloutFactory&lt;/code&gt; contract because it is almost&#xA;identical to the &lt;code&gt;FallbackFactory&lt;/code&gt; from the previous challenge,&#xA;except that in its &lt;code&gt;validateInstance&lt;/code&gt; function it only checks&#xA;that &lt;code&gt;owner() == player&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #2 Fallback</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-2-fallback/</link>
      <pubDate>Sat, 23 Jul 2022 23:25:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-2-fallback/</guid>
      <description>&lt;p&gt;To complete this level we need become the owner of the contract&#xA;and reduce its balance to zero.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;// SPDX-License-Identifier: MIT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;pragma solidity&lt;/span&gt; ^&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;8&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;contract&lt;/span&gt; Fallback {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;mapping&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; =&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; contributions;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; owner;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;constructor&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        contributions[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] = &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1000&lt;/span&gt; * (&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;ether&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;modifier&lt;/span&gt; onlyOwner() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt; == owner, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;caller is not the owner&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;_&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; contribute() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;lt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;.&lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;001&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;ether&lt;/span&gt;, &lt;span style=&#34;color:#0ff;font-weight:bold&#34;&gt;&amp;#34;msg.value must be &amp;lt; 0.001&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        contributions[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] += &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;if&lt;/span&gt; (contributions[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] &amp;gt; contributions[owner]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; getContribution() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;view&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;returns&lt;/span&gt; (&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;uint256&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;return&lt;/span&gt; contributions[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;function&lt;/span&gt; withdraw() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;public&lt;/span&gt; onlyOwner {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;transfer&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;address&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;balance&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    receive() &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;external&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;value&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; contributions[&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;] &amp;gt; &lt;span style=&#34;color:#ff0;font-weight:bold&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        owner = &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;payable&lt;/span&gt;(&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;msg&lt;/span&gt;.&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sender&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve modified the original level code and removed the &lt;code&gt;SafeMath&lt;/code&gt;&#xA;usage since we&amp;rsquo;re using &lt;code&gt;solidity ^0.8.2&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ethernaut, #1 Hello Ethernaut</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-1-hello/</link>
      <pubDate>Thu, 21 Jul 2022 14:48:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-ethernaut-1-hello/</guid>
      <description>&lt;figure&gt;&lt;img src=&#34;https://vyorkin.org/ox-hugo/ethernaut-hello.jpg&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ethernaut.openzeppelin.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Ethernaut&lt;/a&gt; CTF game&#xA;exists for more than 3 years already and has 26 challenges. The&#xA;first one is a kind of introductory challenge that gives you&#xA;steps on what you need to set up. If you have&#xA;&lt;a href=&#34;https://metamask.io/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Metamask&lt;/a&gt; and open the browser&amp;rsquo;s&#xA;console, you should see greeting messages:&lt;/p&gt;&#xA;&lt;figure&gt;&lt;img src=&#34;https://vyorkin.org/ox-hugo/ethernaut-console.png&#34;&gt;&#xA;&lt;/figure&gt;&#xA;&#xA;&lt;h2 id=&#34;set-up&#34;&gt;&#xA;  Set up&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#set-up&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Originally, this game runs on the Rinkeby test network, but&#xA;we&amp;rsquo;re going to play it locally. As I mentioned in the&#xA;&lt;a href=&#34;https://vyorkin.org/posts/ctf-walkthrough-intro&#34; &gt;first post&lt;/a&gt;, we will use&#xA;&lt;a href=&#34;https://book.getfoundry.sh/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Foundry&lt;/a&gt; toolchain and here is&#xA;the initial/empty project layout:&lt;/p&gt;</description>
    </item>
    <item>
      <title>CTF walkthrough, Intro</title>
      <link>https://vyorkin.org/posts/ctf-walkthrough-intro/</link>
      <pubDate>Tue, 19 Jul 2022 00:40:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/ctf-walkthrough-intro/</guid>
      <description>&lt;h2 id=&#34;ctf-s-war-games&#34;&gt;&#xA;  CTF&amp;rsquo;s / War games&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#ctf-s-war-games&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;CTF&amp;rsquo;s (Capture The Flags) are games/challenges focused on the&#xA;Ethereum blockchain that help you to learn security techniques&#xA;and concepts. These are the five popular CTF&amp;rsquo;s worth solving&#xA;(in this order) to master your Ethereum/Solidity offensive&#xA;security skills:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ethernaut.openzeppelin.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Ethernaut&lt;/a&gt; is a wargame by &lt;a href=&#34;https://www.openzeppelin.com/contracts&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenZeppelin&lt;/a&gt;.&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://capturetheether.com/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CaptureTheEther&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.damnvulnerabledefi.xyz/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Damn Vulnerable DeFi&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/paradigm-operations/paradigm-ctf-2021&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paradigm CTF 2021&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ctf.paradigm.xyz/&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Paradigm CTF 2022&lt;/a&gt; (upcoming)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Each level/challenge is a set of vulnerable smart contracts that&#xA;you need to exploit. Some of these are trivial, some require&#xA;understanding of DeFi protocols and are based on a real security&#xA;holes. There are overlapping/similar challenges in Ethernaut and&#xA;CaptureTheEther, so you can do one or the other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proving TAPL in Coq (ch 3, WIP)</title>
      <link>https://vyorkin.org/posts/proving-tapl-in-coq-ch-3/</link>
      <pubDate>Sat, 07 Dec 2019 18:23:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/proving-tapl-in-coq-ch-3/</guid>
      <description>&lt;p&gt;In order to understand things clearly and to learn Coq proof&#xA;assistant at the same time, I&amp;rsquo;ve decided to do some proves while&#xA;reading the TAPL book.&lt;/p&gt;&#xA;&lt;p&gt;The code is &lt;a href=&#34;https://github.com/vyorkin/tapl-coq&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on the GitHub&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;For the excercises I want to use the &lt;a href=&#34;https://coq.inria.fr/refman/proof-engine/ssreflect-proof-language.html&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ssreflect&lt;/a&gt; proof language&#xA;instead of &lt;code&gt;ltac&lt;/code&gt;. I&amp;rsquo;ll keep solutions to each chapter in a&#xA;separate file. We&amp;rsquo;ll always work in the following context:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-coq&#34; data-lang=&#34;coq&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Implicit&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Arguments&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Unset&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Strict&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Implicit&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Unset&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Printing&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Implicit&lt;/span&gt; Defensive.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From Coq &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Require&lt;/span&gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;Import&lt;/span&gt; ssreflect.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ll start with the operational semantics of boolean&#xA;expressions. Here is the definition in Coq:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making of Tiger #6, Stack frames</title>
      <link>https://vyorkin.org/posts/making-of-tiger-6-stack-frames/</link>
      <pubDate>Sat, 21 Sep 2019 16:53:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-6-stack-frames/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post we&amp;rsquo;re going to add support for stack frames.&#xA;Here I&amp;rsquo;ve made some notes while reading the chapter 6 to make sure I&#xA;understand things clearly.&lt;/p&gt;&#xA;&lt;h3 id=&#34;stack&#34;&gt;&#xA;  Stack&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#stack&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A stack is a region of memory that grows downward and shrinks&#xA;upward (like icicles). The top of the stack is it&amp;rsquo;s &lt;code&gt;lowest&lt;/code&gt;&#xA;memory address. We treat stack as a big array, with a&#xA;special register &amp;ndash; the &lt;strong&gt;stack pointer (SP)&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making of Tiger #3, Parsing</title>
      <link>https://vyorkin.org/posts/making-of-tiger-3-parsing/</link>
      <pubDate>Sun, 08 Sep 2019 15:58:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-3-parsing/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this chapter we’re going to build a parser for our Tiger&#xA;language. First, let’s do a quick recap of some important&#xA;concepts of the theory behind programming language parsers:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Parser generator&lt;/strong&gt; is the most common type of&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Compiler-compiler&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;compiler-compiler’s&lt;/a&gt;. It takes some formal grammar (typically&#xA;it is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Context-free_grammar&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;context-free grammar&lt;/a&gt; in &lt;a href=&#34;https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BNF&lt;/a&gt; or &lt;a href=&#34;https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;EBNF &lt;/a&gt;form), that&#xA;defines a syntax of a programming language.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;tiger-grammar-with-menhir&#34;&gt;&#xA;  Tiger grammar with Menhir&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#tiger-grammar-with-menhir&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;While reading the current paragraph I highly recommend&#xA;consulting the &lt;strong&gt;Tiger Language Reference Manual&lt;/strong&gt; that has a&#xA;precise description (along with a BNF notation) of everything&#xA;we’re going to define below.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making of Tiger #2, Lexical Analysis</title>
      <link>https://vyorkin.org/posts/making-of-tiger-2-lexical-analysis/</link>
      <pubDate>Fri, 23 Aug 2019 00:01:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-2-lexical-analysis/</guid>
      <description>&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We need a way to translate a program written in one&#xA;(human-friendly) language to another (machine-specific)&#xA;language. Generally, this work is splitted into 2 parts:&#xA;&lt;strong&gt;analysis&lt;/strong&gt; and &lt;strong&gt;synthesis&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;The &lt;strong&gt;synthesis&lt;/strong&gt;-part (back end) is responsible for the code&#xA;generation and optimizations.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Analysis&lt;/strong&gt;-part (front end) is responsible for breaking the&#xA;program apart to understand its structure and meaning. There are&#xA;3 commonly used &lt;strong&gt;analysis&lt;/strong&gt; phases:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making of Tiger #1, Intro</title>
      <link>https://vyorkin.org/posts/making-of-tiger-1-intro/</link>
      <pubDate>Thu, 22 Aug 2019 20:27:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/making-of-tiger-1-intro/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve started reading the book by&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Andrew_Appel&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Andrew W. Appel&lt;/a&gt;&#xA;titled&#xA;&lt;a href=&#34;https://www.amazon.com/Modern-Compiler-Implement-Andrew-Appel/dp/0521607647&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern&#xA;compiler implementation in ML&lt;/a&gt;. I&amp;rsquo;ve picked it up because I&amp;rsquo;ve&#xA;heard some really good reviews about the ML version of it. Also&#xA;there are other editions available that use C and Java. Each&#xA;chapter covers a single phase of the compilation process and&#xA;comes with some initial ML code and programming excercies. At&#xA;the end you will have a working optimizing compiler.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
