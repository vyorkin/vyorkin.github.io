<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vyorkin.org</title>
    <link>https://vyorkin.org/ru-ru/posts/</link>
    <description>Recent content in Posts on vyorkin.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Dec 2019 10:46:00 +0300</lastBuildDate><atom:link href="https://vyorkin.org/ru-ru/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Заметки про типы в Coq (WIP)</title>
      <link>https://vyorkin.org/ru-ru/posts/notes-on-types-in-coq/</link>
      <pubDate>Sat, 07 Dec 2019 10:46:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/notes-on-types-in-coq/</guid>
      <description>Gallina и CIC    Формальный язык, который используется в Coq для описания математических утверждений и доказательств называется курица. Серьёзно, они назвали его по-испански – Gallina (т.е. gallina blanca это “белая курица”). Этот формальный язык основан на формализме (разновидности теории типов), который называется Исчисление Индуктивных Конструкций (Calculus of Inductive Constructions, сокращённо CIC).
Логические утверждения отождествляются с некоторыми типами, а их доказательства с термами соответствующих типов. Таким образом, чтобы доказать утверждение необходимо сконструировать (предъявить) терм нужного типа.</description>
    </item>
    
    <item>
      <title>Заметка о Lwt</title>
      <link>https://vyorkin.org/ru-ru/posts/about-lwt/</link>
      <pubDate>Tue, 03 Dec 2019 15:59:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/about-lwt/</guid>
      <description>Что такое Lwt    Lwt это одна из наиболее популярных OCaml библиотек, разрабатываемая сообществом. По сути это просто реализация кооперативной многозадачности (как альтернативы вытесняющей многозадачности) в OCaml на основе Promises.
В дальнейшем я буду использовать слова “поток” и промис как взаимозаменямые.
Виды “многозадачностей”    Этот параграф можно пропустить
Если в двух словах, то вытесняющую и кооперативную многозадачность можно объяснить следующим образом:
  Вытесняющая многозадачность означает, что у нас есть некий планировщик, принимающий решения о том, когда будет выполняться какой поток, обычно принимая во внимание приоритет потоков и выделяя им некие кванты времени.</description>
    </item>
    
  </channel>
</rss>
