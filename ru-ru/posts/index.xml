<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on vyorkin.org</title>
    <link>https://vyorkin.org/ru-ru/posts/</link>
    <description>Recent content in Posts on vyorkin.org</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Jul 2022 16:19:00 +0300</lastBuildDate><atom:link href="https://vyorkin.org/ru-ru/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Зелёные потоки в 200 строчек на Rust. Часть 1</title>
      <link>https://vyorkin.org/ru-ru/posts/exploring-async-basics/</link>
      <pubDate>Wed, 13 Jul 2022 16:19:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/exploring-async-basics/</guid>
      <description>Это вольный перевод-конспект &amp;ldquo;книги&amp;rdquo; Green Threads Explained in 200 Lines of Rust.
Пользовательские потоки, горутины, файберы &amp;ndash; у них много названий, но далее для простоты мы будем называть их зелёные потоки. Чтобы разобраться как они устроены мы напишем игрушечную реализацию.
Итак, как мы знаем, есть два вида многозадачности:
Вытесняющая &amp;ndash; внешний планировщик принимает решения о том когда будет выполняться какой поток и отвечает за переключение между ними. Используется в операционных системах.</description>
    </item>
    
    <item>
      <title>Программирование для ARM64. Часть 1</title>
      <link>https://vyorkin.org/ru-ru/posts/arm64-assembly-1/</link>
      <pubDate>Tue, 12 Jul 2022 12:10:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/arm64-assembly-1/</guid>
      <description>Заметка основана на конспектах из книги Programming with 64-bit ARM Assembly Language.
Регистры X0-X30 &amp;ndash; Регистры общего назначения. X31, SP, XZR &amp;ndash; Указатель стека или нулевой регистр, в зависимости от контекста. X30, LR &amp;ndash; Ссылочный регистр. При вызове функции этот регистр используется для хранения адреса возврата. Не рекомендуется его использовать для чего-либо другого. PC &amp;ndash; Счётчик инструкций. Хранит адрес по которому в памяти расположена выполняемая в данный момент инструкция. Мы не всегда хотим использовать все 64 бита данных регистра, иногда нам достаточно 32 бит.</description>
    </item>
    
    <item>
      <title>Заметка о Lwt</title>
      <link>https://vyorkin.org/ru-ru/posts/about-lwt/</link>
      <pubDate>Sun, 31 Oct 2021 12:40:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/about-lwt/</guid>
      <description>Что такое Lwt Lwt это одна из наиболее популярных OCaml библиотек, разрабатываемая сообществом. По сути это просто реализация кооперативной многозадачности (как альтернативы вытесняющей многозадачности) в OCaml на основе Promises.
В дальнейшем я буду использовать слова “поток” и промис как взаимозаменямые.
Виды “многозадачностей” Этот параграф можно пропустить
Если в двух словах, то вытесняющую и кооперативную многозадачность можно объяснить следующим образом:
Вытесняющая многозадачность означает, что у нас есть некий планировщик, принимающий решения о том, когда будет выполняться какой поток, обычно принимая во внимание приоритет потоков и выделяя им некие кванты времени.</description>
    </item>
    
    <item>
      <title>Заметки про типы в Coq (WIP)</title>
      <link>https://vyorkin.org/ru-ru/posts/notes-on-types-in-coq/</link>
      <pubDate>Sun, 31 Oct 2021 12:39:00 +0300</pubDate>
      
      <guid>https://vyorkin.org/ru-ru/posts/notes-on-types-in-coq/</guid>
      <description>Gallina и CIC Формальный язык, который используется в Coq для описания математических утверждений и доказательств называется курица (Gallina это “курица“ в переводе с испанского на русский). Этот язык основан на формализме (разновидности теории типов), который называется Исчисление Индуктивных Конструкций (Calculus of Inductive Constructions, сокращённо CIC).
Логические утверждения отождествляются с некоторыми типами, а их доказательства с термами соответствующих типов. Таким образом, чтобы доказать утверждение необходимо сконструировать (предъявить) терм нужного типа. Короче говоря: утверждения это типы, а программы это доказательства.</description>
    </item>
    
  </channel>
</rss>
