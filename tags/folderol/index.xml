<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Folderol on transcendental kyberautism</title>
    <link>https://vyorkin.org/tags/folderol/</link>
    <description>Recent content in Folderol on transcendental kyberautism</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 22 Jan 2025 02:28:00 +0700</lastBuildDate>
    <atom:link href="https://vyorkin.org/tags/folderol/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Designing a Theorem Prover, Part 9</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-9/</link>
      <pubDate>Wed, 22 Jan 2025 02:28:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-9/</guid>
      <description>&lt;h2 id=&#34;quantifier-unification&#34;&gt;&#xA;  Quantifier Unification&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#quantifier-unification&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;For now our little theorem prover can unify only atomic formulas (predicates). When we encounter quantifiers everything gets more interesting. Let&amp;rsquo;s look at a specific example that Paulson discusses in his paper.&lt;/p&gt;&#xA;&lt;p&gt;Why can&amp;rsquo;t we unify \(\exists x.P(x)\) with \(\exists x.P(?a)\) by simply setting&#xA;\(?a\) to \(x\)? &lt;br /&gt;&#xA;It seems intuitive at first glance, but it&amp;rsquo;s a trap.&lt;/p&gt;&#xA;&lt;p&gt;Think about what these two formulas actually mean:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 8</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-8/</link>
      <pubDate>Wed, 08 Jan 2025 16:44:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-8/</guid>
      <description>&lt;p&gt;As our codebase grows, maintaining clarity and organization becomes more important. It’s time to move beyond inline tests and switch to Alcotest.&lt;/p&gt;&#xA;&lt;h2 id=&#34;alcotest&#34;&gt;&#xA;  Alcotest&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#alcotest&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;To use Alcotest, you need to provide a &lt;code&gt;pp&lt;/code&gt; function for pretty-printing and an &lt;code&gt;equals&lt;/code&gt; function for equality checks. The &lt;code&gt;testable&lt;/code&gt; function in Alcotest handles wrapping your type for testing, requiring only these two functions.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#e5e5e5;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ocaml&#34; data-lang=&#34;ocaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;(* unification.mli *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;module&lt;/span&gt; Env : &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;sig&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(* ... *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;val&lt;/span&gt; pp : Format.formatter -&amp;gt; t -&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;unit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(** Prints the env [t] using the format output function [fmt].&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      @param fmt The formatter to which the formatted env is output.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007f7f&#34;&gt;      @param t The env to be formatted. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;val&lt;/span&gt; equal : t -&amp;gt; t -&amp;gt; &lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;bool&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#007f7f&#34;&gt;(** Returns [true] if two environments are equal. *)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#fff;font-weight:bold&#34;&gt;end&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To implement pretty-printing we&amp;rsquo;ll use the &lt;code&gt;Format&lt;/code&gt; module.&#xA;Equality is just an alias for &lt;code&gt;Map.equal Term.equal&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 7</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-7/</link>
      <pubDate>Thu, 26 Dec 2024 18:03:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-7/</guid>
      <description>&lt;h2 id=&#34;environment&#34;&gt;&#xA;  Environment&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#environment&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Our unification algorithm maintains the environment which is&#xA;defined like this: &lt;br /&gt;&#xA;\(\{(?a_1, t_1), \dots, (?a_k, t_k) \}\), where \(\forall i: a_i \neq t_i\)&lt;/p&gt;&#xA;&lt;p&gt;We will evaluate each term in this env and replace meta-variable \(?a_i\) with \(t_i\) when necessary. When we encounter an \(?a_i\) we will do the replacement and work with \(t_i\) recursively. This process will eventually stop, as the occurs check prevents loops such as \({(?b, f (?a)), (?a, g(?b))}\).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 6</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-6/</link>
      <pubDate>Sat, 14 Dec 2024 22:25:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-6/</guid>
      <description>&lt;h2 id=&#34;unifier&#34;&gt;&#xA;  Unifier&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#unifier&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;As we saw in &lt;a href=&#34;https://vyorkin.org/posts/designing-a-theorem-prover-part-3/#unification&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 3&lt;/a&gt;, unification is the process of finding substitutions for variables in two terms \(t\) and \(u\) to make equation \(t = u\) true.&lt;/p&gt;&#xA;&lt;p&gt;The key assumptions:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Distinctness&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;All functions and constants in the terms are distinct (unless explicitly stated otherwise).&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Equality rules&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;The only valid equalities are:&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Reflexivity (\(t = t\)): Any term is always equal to itself.&lt;/li&gt;&#xA;&lt;li&gt;Substitution of equals for equals: if two terms \(a\) and \(b\) are equal (\(a = b\)), then one can replace the other.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Basically we need to solve a set of equations \(\{t_1 = u_1, \dots, t_n&#xA;= u_n\}\). &lt;br /&gt;&#xA;Each term can be a function application, a parameter, or a meta-variable:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 5</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-5/</link>
      <pubDate>Tue, 10 Dec 2024 19:27:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-5/</guid>
      <description>&lt;p&gt;I don&amp;rsquo;t really enjoy writing parsers. Moreover, parsers and pretty-printing are not exactly related to working through Paulson&amp;rsquo;s paper, but one way or another, I&amp;rsquo;ll have to do it to get a working version of the theorem prover. So let&amp;rsquo;s get started, the time has come.&lt;/p&gt;&#xA;&lt;h2 id=&#34;refactoring&#34;&gt;&#xA;  Refactoring&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#refactoring&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Before working on lexing, parsing and pretty-printing, let&amp;rsquo;s refactor our code to introduce more explicit types for logical connectives and quantifiers. We&amp;rsquo;ll start by defining simple sum-types for &lt;code&gt;connective&lt;/code&gt; and &lt;code&gt;quantifier&lt;/code&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 4</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-4/</link>
      <pubDate>Sat, 30 Nov 2024 20:36:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-4/</guid>
      <description>&lt;h2 id=&#34;terms&#34;&gt;&#xA;  Terms&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#terms&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;One of the first design steps is choosing how to represent&#xA;&lt;strong&gt;&lt;strong&gt;terms&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;formulas&lt;/strong&gt;&lt;/strong&gt;. &lt;br /&gt;&#xA;We have 3 kinds of variables – &lt;strong&gt;&lt;strong&gt;meta-variables&lt;/strong&gt;&lt;/strong&gt;, &lt;strong&gt;&lt;strong&gt;parameters&lt;/strong&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;strong&gt;bound variables&lt;/strong&gt;&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Meta-variables&lt;/strong&gt;&lt;/strong&gt;, which we’ll now simply call “variables,” are represented by names like \(x\), \(y\). &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;strong&gt;Parameters&lt;/strong&gt;&lt;/strong&gt; have a name and a list of variables that represent quantifier rule provisos. &lt;br /&gt;&lt;/li&gt;&#xA;&lt;li&gt;For &lt;strong&gt;&lt;strong&gt;bound variables&lt;/strong&gt;&lt;/strong&gt; we&amp;rsquo;ll use &lt;strong&gt;&lt;strong&gt;De Bruijn indexes&lt;/strong&gt;&lt;/strong&gt; that&#xA;eliminate all bound variable names. This makes formulas like \(\forall x. \forall y. P(x)\) and \(\forall y. \forall x. P(y)\) equivalent.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;blockquote class=&#34;quote2 quote2-question no-quote&#34;&gt;&lt;p&gt;&lt;strong&gt;What Are De Bruijn Indexes?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 3</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-3/</link>
      <pubDate>Sun, 29 Sep 2024 20:19:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-3/</guid>
      <description>&lt;h2 id=&#34;quantifiers-and-unification&#34;&gt;&#xA;  Quantifiers and Unification&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#quantifiers-and-unification&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this post, we’ll dive into the mechanics of quantifiers and&#xA;unification in theorem proving.&lt;/p&gt;&#xA;&lt;h2 id=&#34;meta-variables&#34;&gt;&#xA;  Meta-Variables&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#meta-variables&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In the backward rules \(\forall L\) and \(\exists R\), the term \(t\) is left&#xA;unspecified, meaning it can represent any expression. We will&#xA;use special &lt;strong&gt;&lt;strong&gt;meta-variables&lt;/strong&gt;&lt;/strong&gt; like \(?a\), \(?b\), \(?c\), etc.,&#xA;which act as placeholders for such terms. The backward rules&#xA;will insert a fresh meta-variable, such as \(?b\), in place of \(t\)&#xA;(term) in the subgoal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Forwards versus Backwards Reasoning</title>
      <link>https://vyorkin.org/posts/forwards-reasoning-vs-backwards-reasoning/</link>
      <pubDate>Sat, 21 Sep 2024 19:07:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/forwards-reasoning-vs-backwards-reasoning/</guid>
      <description>&lt;h2 id=&#34;forwards-reasoning&#34;&gt;&#xA;  Forwards Reasoning&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#forwards-reasoning&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;We &lt;strong&gt;start with axioms&lt;/strong&gt;, and step by step build up a proof until we reach the desired conclusion.&lt;/p&gt;&#xA;&lt;p&gt;Example in Gentzen&amp;rsquo;s LK:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;We start with a single axiom: \(A \vdash A\). &lt;br /&gt;&#xA;It means: any formula implies itself, so this sequent is always &lt;strong&gt;true&lt;/strong&gt;.&lt;/li&gt;&#xA;&lt;li&gt;We apply the &lt;strong&gt;left introduction for conjunction&lt;/strong&gt; rule:&#xA;\(\displaystyle \cfrac{\Gamma, A \vdash \Delta}{\Gamma, A \land B \vdash \Delta} \quad&#xA;(\land L_1)\) &lt;br /&gt;&#xA;We get: \(\displaystyle A \land B \vdash A\)&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;We started from axioms or known facts and builded towards the conclusion.&#xA;We applied \(\land L_1\) directly on the axiom.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 2</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-2/</link>
      <pubDate>Mon, 09 Sep 2024 11:30:00 +0700</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-2/</guid>
      <description>&lt;style&gt;&#xA;.colorscheme-dark .sane-table th,&#xA;.colorscheme-dark .sane-table td,&#xA;.sane-table th,&#xA;.sane-table td {&#xA;  border: 0;&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;h2 id=&#34;propositional-logic&#34;&gt;&#xA;  Propositional Logic&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#propositional-logic&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this short post we will explore how different proof&#xA;strategies, particularly in backwards reasoning, can impact the&#xA;efficiency of deriving conclusions. At the end, I&amp;rsquo;ll include a&#xA;table of Paulson&amp;rsquo;s rules for the folderol theorem prover.&lt;/p&gt;&#xA;&lt;p&gt;Propositional logic works with the connectives \(\land\), \(\lor\), \(\to\), \(\leftrightarrow\), and \(\neg\). &lt;br /&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Designing a Theorem Prover, Part 1</title>
      <link>https://vyorkin.org/posts/designing-a-theorem-prover-part-1/</link>
      <pubDate>Sun, 08 Sep 2024 01:02:00 +0300</pubDate>
      <guid>https://vyorkin.org/posts/designing-a-theorem-prover-part-1/</guid>
      <description>&lt;style&gt;&#xA;.sane-table table {&#xA;  font-size: 1.6rem;&#xA;  border-collapse: collapse;&#xA;  width: 100%;&#xA;}&#xA;&#xA;.colorscheme-dark .sane-table th,&#xA;.colorscheme-dark .sane-table td,&#xA;.sane-table th,&#xA;.sane-table td {&#xA;  text-align: center !important;&#xA;  padding: 1.6rem 0.4rem;&#xA;  border: 0;&#xA;}&#xA;&#xA;.sane-table td {&#xA;  min-width: 280px;&#xA;}&#xA;&#xA;.sane-table td:last-child {&#xA;  width: 280px;&#xA;}&#xA;&lt;/style&gt;&#xA;&lt;h2 id=&#34;intro&#34;&gt;&#xA;  Intro&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#intro&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In this series, I’ll be working through the&#xA;&lt;a href=&#34;https://arxiv.org/pdf/cs/9301110&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;folderol&lt;/a&gt; (1990) by &lt;a href=&#34;https://en.wikipedia.org/wiki/Lawrence_Paulson&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lawrence&#xA;C Paulson&lt;/a&gt; and&#xA;trying to use its insights to design a theorem prover in OCaml. He calls&#xA;the prover &lt;strong&gt;folderol&lt;/strong&gt; and I will do the same. His prover follows&#xA;automatic strategy but interactive and prints trace of its rules&#xA;as evidence.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
